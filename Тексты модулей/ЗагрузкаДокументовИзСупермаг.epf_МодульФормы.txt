//Обработка предназначена для загрузки документов из Супермаг+ в 1С Бухгалтерия через COMОбъект ADODB//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Используемые таблицы из Супермаг(БД Oracle SQL):
//SAOPERATION		- Операции. Наименование(Name) операций и их код(ID)
//SMSTORELOCATION 	- Справочник мест хранения (склады, магазины);
//SMCARD			- Карточки(Номенклатура);
//SACARDCLASS		- Классификатор товаров (иерархия справочника номенклатура);
//SMCLIENTINFO		- Данные о контрагенте (Контрагенты);
//
//SMDOCUMENTS		- Таблица документов (Список документов);
//SMSPEC			- Таблица спецификаций документов (Табличные части документов SMDOCUMENTS);
//SMSPECTAX			- Спецификация налоги(ставка ндс в ТЧ SMSPEC);
//SMWAYBILLSIN		- Приходные накладные(Счета-Фактуры полученные);
//SMWAYBILLSOUT		- Приходные накладные(Счета-Фактуры выданные);
//SMDOCCREDCARD		- Продажи и возвраты по кредитным картам;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#Область Основные_функции


#Область ADODB

&НаКлиенте
Функция ЗаполнитьПараметрыСоединенияOracle()
	
	//Объект.Provider 	= "OraOLEDB.Oracle";
	//Объект.DataSource 	= "nameBD";  
	//Объект.UserId		= "username";
	//Объект.Password		= "password";
	
	Объект.Provider 	= "OraOLEDB.Oracle";
	Объект.DataSource 	= "WELLSTOR";
	Объект.UserId		= "olyread3";
	Объект.Password		= "Ewaesh5r";
	
	
КонецФункции

// // Возвращаемое значение: Connection
//   <ADODB.Connection>   - <ADODB соединение c БД Oracle>
&НаСервере
Функция Подключиться_к_БД_Oracle()
	
	//Формируем строку соединения
	ConnectionString = "Provider="+Объект.Provider+";Data Source="+Объект.DataSource+";User Id="+Объект.UserId+";Password="+Объект.Password+";";
	
	//Пытаемся подключиться
	Connection = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		Connection.Open(ConnectionString);
		Возврат Connection;
	Исключение
		Сообщить("Подключение не удалось, по причине:  "+Строка(ОписаниеОшибки()));
	КонецПопытки;
	
	
КонецФункции 

// Параметры:
//  <Connection>  - <ADODB.Connection> - <ADODB соединение c БД Oracle>
//                
//  <ТекстЗапроса>  - <ADODB.Command.CommandText> - <Текст запроса для БД Oracle>
//               
// Возвращаемое значение: СоединениеSQL.Execute()
//   <СоединениеSQL.Execute()>   - <Результат запроса>
//
&НаСервере
Функция ВыполнитьЗапросOracle(Connection, ТекстЗапроса)
	
	СоединениеSQL = Новый COMОбъект("ADODB.Command");
	СоединениеSQL.ActiveConnection = Connection;
	СоединениеSQL.CommandText = ТекстЗапроса;
	RecordSet = Новый ComObject("ADODB.RecordSet");
	
	Возврат СоединениеSQL.Execute();
	
КонецФункции

#КонецОбласти 


#Область Работа_с_документами


&НаКлиенте
Процедура ВыбратьДокументы(Команда, ПоказатьПредупреждениеПользователю = Истина)
	
	Объект.Документы.Очистить();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		ПоказатьПредупреждение(,"Не все необходимые поля заполнены", 300, "Предупреждение");
		Возврат;
	КонецЕсли;                     
	
	кФлагОтборПоСкладу = 0;
	Для каждого тСтр Из Объект.ИдентификаторыСкладов Цикл
		Если тСтр.Флаг Тогда
			кФлагОтборПоСкладу = кФлагОтборПоСкладу+1;
		КонецЕсли; 
	КонецЦикла;
	Если кФлагОтборПоСкладу = 0 Тогда
		ПоказатьПредупреждение(,"Не установлен отбор по складу", 300, "Предупреждение");
		Возврат;
	КонецЕсли;
	
	кФлагОперации = 0;
	Для каждого тСтр Из Операции Цикл
		Если тСтр.Флаг Тогда
			кФлагОперации = кФлагОперации+1
		КонецЕсли;
	КонецЦикла; 
	Если кФлагОперации = 0 Тогда
		ПоказатьПредупреждение(,"Не установлен отбор по операции", 300, "Предупреждение");
		Возврат;
	КонецЕсли;
	
	НачДата = Формат(Объект.Период.ДатаНачала, "ДФ=dd.MM.yyyy"); 
	КонДата = Формат(Объект.Период.ДатаОкончания, "ДФ=dd.MM.yyyy");
	
	мКодыОперацииПриход = Новый Массив;
	мКодыОперацииПриход.Добавить("0");
	мКодыОперацииПриход.Добавить("3");
	мКодыОперацииПриход.Добавить("9");
	
	мКодыОперацииРасход = Новый Массив;
	мКодыОперацииРасход.Добавить("1");
	мКодыОперацииРасход.Добавить("2");
	мКодыОперацииРасход.Добавить("7");
	мКодыОперацииРасход.Добавить("8");
	
	Для каждого тСтр Из Операции Цикл
		Если тСтр.Флаг Тогда
			Если НЕ мКодыОперацииПриход.Найти(тСтр.КодОперации) = Неопределено Тогда
				ПолучитьСписокДокументовИзСупермага("'WI'", тСтр.КодОперации);
			ИначеЕсли НЕ мКодыОперацииРасход.Найти(тСтр.КодОперации) = Неопределено Тогда 
				ПолучитьСписокДокументовИзСупермага("'WO','CS'", тСтр.КодОперации);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Если ПоказатьПредупреждениеПользователю Тогда
		ПоказатьПредупреждение(,"Документы загружены");
		ТекущийЭлемент = Элементы.ГруппаДокументы;
	КонецЕсли; 
	
	мКодыОперацииПриход.Очистить();
	мКодыОперацииРасход.Очистить();
	
КонецПроцедуры

//Загрузка списка документов из Супермага (SMDOCUMENTS)
&НаСервере
Процедура ПолучитьСписокДокументовИзСупермага(ТипДокументаОтбор, КодОперацииОтбор)
	
	СкладТЗ = Объект.ИдентификаторыСкладов.Выгрузить(Новый Структура("Флаг", Истина)); 
	СкладОтбор =  МассивВСтрокуЗапроса(СкладТЗ.ВыгрузитьКолонку("Идентификатор"));
	СкладТЗ.Очистить();
	
	ВидДоговораПоставщика = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	
	//Формируем текст запроса для SQL Oracle
	ТекстЗапроса = 
	"SELECT  
	|	SMDOCUMENTS.ID 				AS ""Номер документа"",
	|	SMDOCUMENTS.OPCODE			AS ""КодОперации"",
	|	SMDOCUMENTS.DOCTYPE         AS ""ТипДокумента"",
	|	SMDOCUMENTS.CREATEDAT 		AS ""Дата документа"",
	|	SMDOCUMENTS.DOCSTATE 		AS ""Статус документа"",
	|	SMDOCUMENTS.LOCATIONTO 		AS ""НаСклад"",
	|	SMDOCUMENTS.LOCATIONFROM	AS ""СоСклада"",
	|	SMDOCUMENTS.CLIENTINDEX 	AS ""Поставщик"",
	|	SMDOCUMENTS.TOTALSUM		AS ""Сумма документа"",
	|	SMCLIENTINFO.NAME 			AS ""Наименование поставщика"",
	|	SMCLIENTINFO.INN 			AS ""ИНН""  
	|FROM 
	|	SUPERMAG.SMDOCUMENTS
	|LEFT JOIN
	|	SUPERMAG.SMCLIENTINFO 		ON  SMCLIENTINFO.ID = SMDOCUMENTS.CLIENTINDEX
	|WHERE 
	|	CREATEDAT 						>= TO_DATE('"+Формат(Объект.Период.ДатаНачала,"ДФ=dd.MM.yyyy")+"','DD.MM.YYYY') 
	|	AND CREATEDAT 					<= TO_DATE('"+Формат(Объект.Период.ДатаОкончания,"ДФ=dd.MM.yyyy")+"','DD.MM.YYYY')
	|	AND SMDOCUMENTS.OPCODE			 = '"+КодОперацииОтбор+"'  
	|	AND SMDOCUMENTS.DOCTYPE 		IN ("+Строка(ТипДокументаОтбор)+")
	|	AND SMDOCUMENTS.СкладОтбор 		IN 	("+СкладОтбор+")";	
	
	
	Если  ТипДокументаОтбор = "'WI'" Тогда //если приход то отбор по реквизиту "На склад"
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СкладОтбор", "LOCATIONTO"); 
	ИначеЕсли ТипДокументаОтбор = "'WO','CS'" Тогда //если расход или продажа то отбор по реквизиту "Со склада"
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СкладОтбор", "LOCATIONFROM");
	КонецЕсли;
	
	//Подключаемся (к Oracle БД)и выполняем запрос
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	//Заполняем список документов
	While  NOT RecordSet.EOF Do
		НоваяСтрока = Объект.Документы.Добавить();
		ИдентификаторСМ = СтрЗаменить(Строка(Формат(RecordSet.Fields("Дата документа").Value, "ДФ=dd.MM.yyyy")),".","") + RecordSet.Fields("ТипДокумента").Value + Строка(RecordSet.Fields("Номер документа").Value);
		НоваяСтрока.ТипДокумента 			= RecordSet.Fields("ТипДокумента").Value;
		НоваяСтрока.ДатаДокумента   		= RecordSet.Fields("Дата документа").Value;
		НоваяСтрока.НомерДокумента 			= RecordSet.Fields("Номер документа").Value;
		НоваяСтрока.ИдентификаторСМ			= ИдентификаторСМ;
		НоваяСтрока.Организация				= Объект.Организация;
		НоваяСтрока.ПоставщикНаименование 	= RecordSet.Fields("Наименование поставщика").Value;
		НоваяСтрока.ПоставщикИНН		 	= RecordSet.Fields("ИНН").Value;
		НоваяСтрока.КонтрагентСсылка        = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", RecordSet.Fields("ИНН").Value);
		НоваяСтрока.ДоговорПоставщика		= Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ВидДоговора", ВидДоговораПоставщика, , НоваяСтрока.КонтрагентСсылка);
		НоваяСтрока.СуммаДокументаСНДС	 	= RecordSet.Fields("Сумма документа").Value;
		НоваяСтрока.Склад				 	= Объект.Склад;
		НоваяСтрока.КодОперации				= RecordSet.Fields("КодОперации").Value;
		Если НоваяСтрока.ТипДокумента = "WI" Тогда
			Если RecordSet.Fields("КодОперации").Value = 0 Тогда
				НоваяСтрока.ДополнительноеСвойство	= ПолучитьДополнительноеСвойство("ПоступлениеТоваровУслуг");
				НоваяСтрока.ДокументСсылка 			= ПолучитьСсылкуНаДокумент(ИдентификаторСМ, "ПоступлениеТоваровУслуг", НоваяСтрока.ДополнительноеСвойство);
				НоваяСтрока.ТипДокумента1С 			= Тип("ДокументСсылка.ПоступлениеТоваровУслуг");
			ИначеЕсли RecordSet.Fields("КодОперации").Value = 9 Тогда 
				НоваяСтрока.ДополнительноеСвойство	= ПолучитьДополнительноеСвойство("ОприходованиеТоваров");
				НоваяСтрока.ДокументСсылка 			= ПолучитьСсылкуНаДокумент(ИдентификаторСМ, "ОприходованиеТоваров", НоваяСтрока.ДополнительноеСвойство);
				НоваяСтрока.ТипДокумента1С 			= Тип("ДокументСсылка.ОприходованиеТоваров");
			КонецЕсли; 
		ИначеЕсли НоваяСтрока.ТипДокумента = "WO" Тогда
			Если  RecordSet.Fields("КодОперации").Value = 1 Тогда
				НоваяСтрока.ДополнительноеСвойство	= ПолучитьДополнительноеСвойство("РеализацияТоваровУслуг");
				НоваяСтрока.ДокументСсылка 			= ПолучитьСсылкуНаДокумент(ИдентификаторСМ, "РеализацияТоваровУслуг", НоваяСтрока.ДополнительноеСвойство);
				НоваяСтрока.ТипДокумента1С 			= Тип("ДокументСсылка.РеализацияТоваровУслуг");
			ИначеЕсли RecordSet.Fields("КодОперации").Value = 2 Тогда 
				НоваяСтрока.ДополнительноеСвойство	= ПолучитьДополнительноеСвойство("ВозвратТоваровПоставщику");
				НоваяСтрока.ДокументСсылка 			= ПолучитьСсылкуНаДокумент(ИдентификаторСМ, "ВозвратТоваровПоставщику", НоваяСтрока.ДополнительноеСвойство);
				НоваяСтрока.ТипДокумента1С 			= Тип("ДокументСсылка.ВозвратТоваровПоставщику");
			ИначеЕсли RecordSet.Fields("КодОперации").Value = 7 ИЛИ RecordSet.Fields("КодОперации").Value = 8 Тогда 
				//НоваяСтрока.ДополнительноеСвойство	= ПолучитьДополнительноеСвойство("СписаниеТоваров");
				//НоваяСтрока.ДокументСсылка 			= ПолучитьСсылкуНаДокумент(ИдентификаторСМ, "СписаниеТоваров", НоваяСтрока.ДополнительноеСвойство);
				//НоваяСтрока.ТипДокумента1С 			= Тип("ДокументСсылка.СписаниеТоваров");
				НоваяСтрока.ДополнительноеСвойство	= ПолучитьДополнительноеСвойство("ОперацияБух");
				НоваяСтрока.ДокументСсылка 			= ПолучитьСсылкуНаДокумент(ИдентификаторСМ, "ОперацияБух", НоваяСтрока.ДополнительноеСвойство);
				НоваяСтрока.ТипДокумента1С 			= Тип("ДокументСсылка.ОперацияБух");   
			КонецЕсли;   
		ИначеЕсли НоваяСтрока.ТипДокумента = "CS" Тогда 	
			НоваяСтрока.ДополнительноеСвойство	= ПолучитьДополнительноеСвойство("ОтчетОРозничныхПродажах");
			НоваяСтрока.ДокументСсылка 			= ПолучитьСсылкуНаДокумент(ИдентификаторСМ, "ОтчетОРозничныхПродажах", НоваяСтрока.ДополнительноеСвойство);
			НоваяСтрока.ТипДокумента1С 			= Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
		КонецЕсли; 
		RecordSet.MoveNext();
	EndDo;
	
	RecordSet.Close();
	Connection.Close();
	
	Объект.Документы.Сортировать("ТипДокумента1С, ДатаДокумента Возр");
	
	Если Объект.Документы.Количество() > 0 Тогда
		//Если загружаем розничные продажи надо загрузить и возвраты, чтобы потом вычесть их из продаж
		Если НЕ СтрНайти(ТипДокументаОтбор,"CS") = 0 Тогда
			ВычестьВозвратыПокупателяИзРозничныхПродаж();	
		КонецЕсли;		
	КонецЕсли; 
	
КонецПроцедуры

//Получение табличной части документа
&НаСервере
Функция ПолучитьСпецификациюДокумента( ТипДокументаОтбор, ДокументОтбор)
	
	//Очистим табличную часть, чтобы не задублировались данные при повторных загрузках
	СпецификацииДокументов.Очистить();
	
	//Формируем текст запроса
	ТекстЗапроса = 
	"SELECT
	|      SMCARD.NAME 				AS ""НаименованиеНоменклатуры"",
	|      SMCARD.IDSPIRITCODE		AS ""Алкоголь"",
	|      SMCARD.IDCLASS			AS ""КодГруппы"",
	|	   SMSPECTAX.TAXRATE        AS ""СтавкаНДС"",
	|	   SMSPECTAX.TAXSUM        	AS ""СуммаНДС"",
	|      SMSPEC.DOCID 			AS ""НомерДокумента"",  
	|      SMSPEC.ARTICLE			AS ""Артикул"",
	|	   SMSPEC.SPECITEM 			AS ""ВнутреннийНомерПозиции"", 
	|      SMSPEC.QUANTITY 			AS ""Количество"",
	|      SMSPEC.ITEMPRICE 		AS ""ЦенаСНалогами"",
	|      SMSPEC.TOTALPRICE 		AS ""СтоимостьСНалогами"",
	|      SMSPEC.ITEMPRICENOTAX 	AS ""ЦенаБезНалогов"",
	|      SMSPEC.TOTALPRICENOTAX 	AS ""СуммаБезНалогов""
	|FROM 
	|	   	SUPERMAG.SMSPEC
	|LEFT JOIN
	|	   SUPERMAG.SMSPECTAX ON SMSPECTAX.DOCID = SMSPEC.DOCID  AND SMSPECTAX.SPECITEM = SMSPEC.SPECITEM  AND SMSPECTAX.DOCTYPE = SMSPEC.DOCTYPE
	|LEFT JOIN
	|	   	SUPERMAG.SMCARD 		ON  SMSPEC.ARTICLE = SMCARD.ARTICLE
	|WHERE  
	|		SMSPEC.DOCID 			= '"+ДокументОтбор+"'  AND SMSPEC.DOCTYPE = '"+Строка(ТипДокументаОтбор)+"'"; 
	
	//Подключаемся (к Oracle БД)и выполняем запрос
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	While NOT RecordSet.EOF Do
		НоваяСтрока = СпецификацииДокументов.Добавить();
		НоваяСтрока.НомерДокумента 				= RecordSet.Fields("НомерДокумента").Value;
		НоваяСтрока.Артикул		 				= RecordSet.Fields("Артикул").Value;
		НоваяСтрока.ВнутреннийНомерПозиции		= RecordSet.Fields("ВнутреннийНомерПозиции").Value;
		НоваяСтрока.Номенклатура				= RecordSet.Fields("НаименованиеНоменклатуры").Value;
		НоваяСтрока.КодГруппы					= RecordSet.Fields("КодГруппы").Value;
		НоваяСтрока.Количество	 				= RecordSet.Fields("Количество").Value;
		НоваяСтрока.ЦенаБезНДС		 			= RecordSet.Fields("ЦенаБезНалогов").Value;
		НоваяСтрока.СуммаБезНДС	 				= Формат(?(RecordSet.Fields("СуммаБезНалогов").Value = NULL, 0,RecordSet.Fields("СуммаБезНалогов").Value),"ЧЦ=20; ЧДЦ=2");
		НоваяСтрока.Цена		 				= RecordSet.Fields("ЦенаСНалогами").Value;
		НоваяСтрока.Сумма			 			= RecordSet.Fields("СтоимостьСНалогами").Value;
		НоваяСтрока.Алкоголь					= RecordSet.Fields("Алкоголь").Value;
		НоваяСтрока.СтавкаНДС 					= RecordSet.Fields("СтавкаНДС").Value;
		НоваяСтрока.СуммаНДС					= RecordSet.Fields("СуммаНДС").Value;
		НоваяСтрока.СчетУчета 					= СчетУчетаТоваров;
		НоваяСтрока.СчетУчетаНДС				= СчетУчетаНДС;
		RecordSet.MoveNext();
	EndDo;
	
	RecordSet.Close();
	Connection.Close();
	
	//Проставим флаг на собственный товар
	тзСпецификацииДокументов = РеквизитФормыВЗначение("СпецификацииДокументов");
	ЗаполнитьПризнакТовараСобственныйКомисссия(тзСпецификацииДокументов);
	ЗначениеВРеквизитФормы(тзСпецификацииДокументов,"СпецификацииДокументов");
	
КонецФункции

//Получим возвраты от розничного покупателя, для вычитания из продаж
&НаСервере
Функция ПолучитьВозвратыОтРозничногоПокупателя()
	
	СпецификацииВозвратовОтПокупателя.Очистить();
	
	ДокументыПродажиОтбор = МассивВСтрокуЗапроса(Объект.Документы.Выгрузить(,"НомерДокумента").ВыгрузитьКолонку("НомерДокумента"));
	
	ТекстЗапроса =
	"SELECT 
	|		SMCARD.IDCLASS		  AS ""КодГруппы"",
	|		SMSPECTAX.TAXRATE     AS ""СтавкаНДС"",
	|		SMSPECTAX.TAXSUM      AS ""СуммаНДС"",		
	|	   	SMSPEC.CAUSEID        AS ""ДокументПродажи"",
	|		SMSPEC.QUANTITY       AS ""Количество"",
	|		SMSPEC.TOTALPRICE     AS ""СтоимостьСНалогами""		
	|FROM 
	|		SUPERMAG.SMSPEC
	|LEFT JOIN
	|	    SUPERMAG.SMSPECTAX ON SMSPECTAX.DOCID = SMSPEC.DOCID  AND SMSPECTAX.SPECITEM = SMSPEC.SPECITEM  AND SMSPECTAX.DOCTYPE = SMSPEC.DOCTYPE 
	|LEFT JOIN
	|    	SUPERMAG.SMCARD 		ON  SMSPEC.ARTICLE = SMCARD.ARTICLE
	|WHERE 
	|		SMSPEC.CAUSEID IN ("+ДокументыПродажиОтбор+") AND  SMSPEC.DOCTYPE = 'CR' ";
	
	//Подключаемся (к Oracle БД)и выполняем запрос
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	//Заполняем список документов СпецификацииВозвратовОтПокупателя
	While Not RecordSet.EOF Do
		НоваяСтрока = СпецификацииВозвратовОтПокупателя.Добавить();
		НоваяСтрока.ДокументПродажи		= RecordSet.Fields("ДокументПродажи").Value;
		НоваяСтрока.Количество			= RecordSet.Fields("Количество").Value;
		Если RecordSet.Fields("СтавкаНДС").Value = 18 Тогда
			СтавкаНДС = НДС18;
		ИначеЕсли RecordSet.Fields("СтавкаНДС").Value = 10 Тогда
			СтавкаНДС = НДС10;
		Иначе
			СтавкаНДС = БезНДС;
		КонецЕсли; 
		НоваяСтрока.СтавкаНДС			= СтавкаНДС;
		НоваяСтрока.КодГруппы			= RecordSet.Fields("КодГруппы").Value;
		НоваяСтрока.СтоимостьСНалогами	= RecordSet.Fields("СтоимостьСНалогами").Value;	
		RecordSet.MoveNext();
	EndDo;
	
	RecordSet.Close();
	Connection.Close();
	
	тзСпецификацииВозвратовОтПокупателя = РеквизитФормыВЗначение("СпецификацииВозвратовОтПокупателя");
	ЗаполнитьПризнакТовараСобственныйКомисссия(тзСпецификацииВозвратовОтПокупателя);
	ЗначениеВРеквизитФормы(тзСпецификацииВозвратовОтПокупателя,"СпецификацииВозвратовОтПокупателя");
	
КонецФункции

//Процедура вычетает из розничных продаж, возвраты от покупателей
&НаСервере
Процедура ВычестьВозвратыПокупателяИзРозничныхПродаж()
	
	ПолучитьВозвратыОтРозничногоПокупателя();
	ВозвратПокупателя = СпецификацииВозвратовОтПокупателя.Выгрузить(,"ДокументПродажи,СтоимостьСНалогами");
	ВозвратПокупателя.Свернуть("ДокументПродажи","СтоимостьСНалогами");
	
	//Заполним колонку "СуммаВозвратов" в ТЧ (обработки) "Документы"
	Для каждого СтрокаДокумент Из Объект.Документы Цикл
		ПоискВозвратПокупателя = ВозвратПокупателя.Найти(СтрокаДокумент.НомерДокумента);
		Если ПоискВозвратПокупателя = Неопределено Тогда
			Продолжить;		
		КонецЕсли; 
		Если СтрокаДокумент.ДокументСсылка.СуммаДокумента = СтрокаДокумент.СуммаДокументаСНДС - ПоискВозвратПокупателя.СтоимостьСНалогами Тогда
			СтрокаДокумент.ДокументСуществуетИзменен = 1; //документ есть в базе но сумма не изменилась
		Иначе	
			СтрокаДокумент.ДокументСуществуетИзменен = 2; //документ есть в базе но сумма изменилась
		КонецЕсли; 
		СтрокаДокумент.СуммаВозвратов = ПоискВозвратПокупателя.СтоимостьСНалогами;
	КонецЦикла;
	
КонецПроцедуры

//Получаем счет-фактуры и накладные поставщика из Супермаг+
&НаСервере
Функция ПолучитьНакладнуюСчетФактуруПолученныйИзСМ(ОтборПоНомеру)
	
	//Формируем текст запроса для SQL Oracle
	ТекстЗапроса =	
	"SELECT
	|	SUPPLIERINVOICE 	AS ""СчетфактураПоставщика"",
	|	SUPPLINVOICECREATE 	AS ""ДатаСчетфактуры"",
	|   SUPPLIERDOC 		AS ""НакладнаяПоставщика"",
	|	SUPPLIERDOCCREATE	AS ""ДатаНакладной""
	|FROM 
	|	SUPERMAG.SMWAYBILLSIN
	|WHERE 
	|	ID = '"+ОтборПоНомеру+"'";
	
	Connecting 	= Подключиться_к_БД_Oracle();
	RecordSet	= ВыполнитьЗапросOracle(Connecting, ТекстЗапроса);
	
	НакладнаяСчетФактура = Новый Массив;
	
	While NOT RecordSet.EOF Do
		Если RecordSet.Fields("СчетфактураПоставщика").Value <> NULL Тогда
			НакладнаяСчетФактура.Вставить(0,RecordSet.Fields("СчетфактураПоставщика").Value);
			НакладнаяСчетФактура.Вставить(1,RecordSet.Fields("ДатаСчетфактуры").Value);
			НакладнаяСчетФактура.Вставить(2,RecordSet.Fields("НакладнаяПоставщика").Value);
			НакладнаяСчетФактура.Вставить(3,RecordSet.Fields("ДатаНакладной").Value);
		КонецЕсли; 
		RecordSet.MoveNext();
	EndDo;
	
	RecordSet.Close();
	Connecting.Close();
	
	Возврат НакладнаяСчетФактура;
	
КонецФункции 

//Получим из супермага Счет фактуру выданную
&НаСервере
Функция ПолучитьСчетФактуруВыданныйИзСМ(ОтборПоНомеру)
	
	//Формируем текст запроса для SQL Oracle
	ТекстЗапроса =	
	"SELECT
	|	INVOICE 	AS ""СчетфактураПоставщика"",
	|	INVOICEDATE	AS ""ДатаСчетфактуры""
	|FROM 
	|	SUPERMAG.SMWAYBILLSOUT
	|WHERE 
	|	ID = '"+ОтборПоНомеру+"'";
	
	Connecting 	= Подключиться_к_БД_Oracle();
	RecordSet	= ВыполнитьЗапросOracle(Connecting, ТекстЗапроса);
	
	НакладнаяСчетФактура = Новый Массив;
	
	While NOT RecordSet.EOF Do
		Если RecordSet.Fields("СчетфактураПоставщика").Value <> NULL Тогда
			НакладнаяСчетФактура.Вставить(0,RecordSet.Fields("СчетфактураПоставщика").Value);
			НакладнаяСчетФактура.Вставить(1,RecordSet.Fields("ДатаСчетфактуры").Value);
		КонецЕсли; 
		RecordSet.MoveNext();
	EndDo;
	
	RecordSet.Close();
	Connecting.Close();
	
	Возврат НакладнаяСчетФактура;
	
КонецФункции 

// <Описание функции>
//
// Параметры:
//  ДокументСсылка  	- Документ.Ссылка 	- Ссылка на документ основание 
//  НомерСФИзСМ			- Строка 			- Номер  сч.фактуры полученный из Суперамг+
//  ДатаСФИзСМ			- Строка 			- Дата  сч.фактуры полученная из Супермаг+
//
// Возвращаемое значение: Нет   
// 
&НаСервереБезКонтекста
Функция ЗарегистрироватьСчетФактуруПолученный(ДокументСсылка, НомерСФИзСМ, ДатаСФИзСМ)
	
	Попытка
		УчетНДСВызовСервера.СоздатьСчетФактуруПолученныйНаОсновании(ДокументСсылка, НомерСФИзСМ, ДатаСФИзСМ, ДокументСсылка.Контрагент, Неопределено);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаСерверебезКонтекста
Функция ЗарегистрироватьСчетФактуруВыданный(ДокументОснование, НомерСФИзСМ)
	
	Попытка
		СсылкаСчетФактураНовый = 	УчетНДСПереопределяемый.СоздатьСчетФактуруВыданныйНаОсновании(ДокументОснование);
		ОбъектСчетФактураНовый = СсылкаСчетФактураНовый.ПолучитьОбъект();
		ОбъектСчетФактураНовый.Номер = НомерСФИзСМ;
		ОбъектСчетФактураНовый.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции  

//Ищем документ по Дополнительному свойству
//
// Параметры:
//  ИдентификаторСМ  - Строка.ДатаНомер -  номер документа, как Датадокумента + ТипДокумента + НомерДокумента, для поиска по доп.свойству "Идентификатор СМ"
//                 
//  ДокументТип  - ДокументСсылка.ТипДокумента - по какому документу искать (поступление, возврат и пр.)
//                 
//  ДопСвойство - ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Ссылка
//
// Возвращаемое значение:
//   Документ.ТипДоркумента.Ссылка или Документ.ТипДоркумента.ПустаяСсылка   - если нашли документ то передаем ссылку на него иначе передаем пустую ссылку, на документ данного типа
//
&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаДокумент(ИдентификаторСМ, ДокументТипОтбор, ДопСвойство)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСМ", ИдентификаторСМ);
	Запрос.УстановитьПараметр("Свойство", ДопСвойство);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект.Ссылка
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Документ."+ДокументТипОтбор+"
	|	И ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &ИдентификаторСМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат	Документы[ДокументТипОтбор].ПустаяСсылка();
	Иначе
		Возврат	РезультатЗапроса.Выгрузить()[0].ОбъектСсылка;	
	КонецЕсли; 
	
КонецФункции

//Функция получает сумму безналичных продаж, за минусом возвратов, по идентификатору  документа продаж из Супермаг+
&НаСервере
Функция ПолучитьБезнал(ID)	
	
	//Получим сумму продаж по безналу
	ТекстЗапроса =
	"SELECT TOTALSUM
	|	FROM SUPERMAG.SMDOCCREDCARD
	|	WHERE id = '"+ID+"'";
	
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	СуммаБезнал = 0;
	While RecordSet.EOF = False DO
		СуммаБезнал = СуммаБезнал + RecordSet.Fields("TOTALSUM").Value;
		RecordSet.MoveNext(); 
	EndDo;
	RecordSet.Close();
	Connection.Close();
	
	//изменим префикс документа с CS на CR чтобы получить сумму возвратов по безналу
	ID = СтрЗаменить(ID, "CS", "CR");
	//И сформируем запрос заново
	ТекстЗапроса =
	"SELECT TOTALSUM
	|	FROM SUPERMAG.SMDOCCREDCARD
	|	WHERE id = '"+ID+"'";
	
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	СуммаБезналВозврат = 0;
	While RecordSet.EOF = False DO
		СуммаБезналВозврат = СуммаБезналВозврат + RecordSet.Fields("TOTALSUM").Value;
		RecordSet.MoveNext(); 
	EndDo;
	RecordSet.Close();
	Connection.Close();	
	
	//Вычтем возвраты
	Return СуммаБезнал - СуммаБезналВозврат;
	
КонецФункции

//Запишем выбранные документы
&НаКлиенте
Процедура ЗаписатьДокументы(Команда)
	
	//Проверим был ли выбран на запись хотя бы один документ
	кФл =0;
	Для каждого тСтр Из Объект.Документы Цикл
		Если тСтр.Флаг Тогда 	
			кФл = кФл+1;
		КонецЕсли; 
	КонецЦикла; 
	Если кФл = 0 Тогда
		ПоказатьПредупреждение(,"Не выбрано ни одного документа, для записи!!!", 30, "Предупреждение!");
		Возврат;
	КонецЕсли;
	
	//Заполним отбор по группам, на основании выбора пользователя в "НоменклатурныеГруппы"
	ПолучитьОтборПоГруппам("");
	
	ЗаписатьДокументыНаСервере();
	ПоказатьЗаписаныеДокументы();
	ПоказатьПредупреждение(,"Документы записаны");
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДокументыНаСервере()
	
	ЗаписываемыеДокументы = Объект.Документы.Выгрузить( Новый Структура("Флаг", Истина));
	
	Для каждого тСтр Из ЗаписываемыеДокументы Цикл
		Если тСтр.ТипДокумента = "WI" Тогда
			ПолучитьСпецификациюДокумента(тСтр.ТипДокумента, тСтр.НомерДокумента);
			Если Число(тСтр.КодОперации) = 0 Тогда
				ЗаписатьПоступлениеТоваров(тСтр);
			ИначеЕсли  Число(тСтр.КодОперации) = 9 Тогда 	
				ЗаписатьОприходованиеТоваров(тСтр);	
			КонецЕсли; 
		ИначеЕсли тСтр.ТипДокумента = "WO" Тогда 
			ПолучитьСпецификациюДокумента(тСтр.ТипДокумента, тСтр.НомерДокумента);
			Если Число(тСтр.КодОперации) = 1 Тогда
				ЗаписатьРеализацияТоваров(тСтр);	
			ИначеЕсли Число(тСтр.КодОперации) = 2 Тогда 	
				ЗаписатьВозвратПоставщику(тСтр);	
			ИначеЕсли Число(тСтр.КодОперации) = 7 ИЛИ Число(тСтр.КодОперации) = 8 Тогда 	
				//ЗаписатьСписаниеТоваров(тСтр);
				ЗаписатьСписаниеТоваровЧерезОперацию(тСтр);
			КонецЕсли; 
		ИначеЕсли тСтр.ТипДокумента = "CS" Тогда 
			ПолучитьСпецификациюДокумента(тСтр.ТипДокумента, тСтр.НомерДокумента);
			ЗаписатьООП(тСтр);
		КонецЕсли; 	
	КонецЦикла; 
	
КонецФункции

&НаСервере                                             
Функция ПоказатьЗаписаныеДокументы()
	
	тзДокЗап = Объект.Документы.Выгрузить(Новый Структура("Флаг", Истина));
	
	Для каждого тСтр Из тзДокЗап Цикл	
		тСтр.ДокументСсылка = ПолучитьСсылкуНаДокумент(тСтр.ИдентификаторСМ, ПолучитьСоответсвиеДокумента(тСтр.ТипДокумента1С), тСтр.ДополнительноеСвойство);
		тСтр.Флаг = Ложь;
	КонецЦикла; 
	
	Объект.Документы.Загрузить(тзДокЗап);
	
КонецФункции 

&НаСервере
Функция ЗаписатьПоступлениеТоваров(ЗаписываемыйДокумент)
	
	СсылкаНаДокумент =  ЗаписываемыйДокумент.ДокументСсылка; 	
	
	Если СсылкаНаДокумент =  Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда
		ДокументПоступления =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	Иначе
		ДокументПоступления = СсылкаНаДокумент.ПолучитьОбъект();
		//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
		ДокументПоступления.Товары.Очистить();
	КонецЕсли;
	ДокументПоступления.Дата = ЗаписываемыйДокумент.ДатаДокумента;
	
	//Получем номера и даты счет-фактуры и накладной поставщика
	НакладнаяСчетФактура = ПолучитьНакладнуюСчетФактуруПолученныйИзСМ(ЗаписываемыйДокумент.НомерДокумента);
	Если НакладнаяСчетФактура.Количество() > 0 Тогда
		НомерСчетФактуры			= НакладнаяСчетФактура[0];
		ДатаСчетФактуры				= НакладнаяСчетФактура[1];
		НомерНакладнойПоставщика 	= НакладнаяСчетФактура[2];
		ДатаНакладнойПоставщика		= НакладнаяСчетФактура[3];
	КонецЕсли; 
	ДокументПоступления.НомерВходящегоДокумента		= НомерНакладнойПоставщика;
	ДокументПоступления.ДатаВходящегоДокумента      = ДатаНакладнойПоставщика;
	
	//Заполним реквизиты  документа
	ЗаполнениеДокументов.Заполнить(ДокументПоступления, СформироватьСтруктуруЗаполнения(ЗаписываемыйДокумент, ДокументПоступления), Истина);
	ЗаполнитьРеквизитыДокумента(ЗаписываемыйДокумент, ДокументПоступления);
	Если НЕ ЗначениеЗаполнено(ДокументПоступления.ДоговорКонтрагента) Тогда
		ДокументПоступления.ДоговорКонтрагента = ЗаписываемыйДокумент.ДоговорПоставщика;
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(ДокументПоступления.Склад) Тогда
		ДокументПоступления.Склад = ЗаписываемыйДокумент.Склад;
	КонецЕсли; 
	
	//Получим табличную часть документа
	ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ЗаписываемыйДокумент.НомерДокумента));
	
	//Заполним табличную часть документа
	ЗаполнитьТабличнуюЧастьТовары(ДокументПоступления, ТоварыТЗ);
	
	//Попытаемся записать документ
	Попытка
		ДокументПоступления.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
	Если СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда
		ЗаписатьИдентификаторСМ(ДокументПоступления.Ссылка, ПолучитьДополнительноеСвойство("ПоступлениеТоваровУслуг"), ЗаписываемыйДокумент.ИдентификаторСМ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСчетФактуры) Тогда
		ЗарегистрироватьСчетФактуруПолученный(ДокументПоступления.Ссылка, НомерСчетФактуры, ДатаСчетФактуры); 
	КонецЕсли; 
	
	
КонецФункции

&НаСервере
Функция ЗаписатьВозвратПоставщику(ЗаписываемыйДокумент)
	
	СсылкаНаДокумент =  ЗаписываемыйДокумент.ДокументСсылка;
	
	//Получем номер и дату счет-фактуры 	
	НакладнаяСчетФактура = ПолучитьСчетФактуруВыданныйИзСМ(ЗаписываемыйДокумент.НомерДокумента);
	Если НакладнаяСчетФактура.Количество() > 0 Тогда
		НомерСчетФактуры			= НакладнаяСчетФактура[0];
		ДатаСчетФактуры				= НакладнаяСчетФактура[1];
	КонецЕсли; 
	
	Если СсылкаНаДокумент =   Документы.ВозвратТоваровПоставщику.ПустаяСсылка() Тогда
		ДокументВозвратПоставщику = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
	Иначе
		ДокументВозвратПоставщику = СсылкаНаДокумент.ПолучитьОбъект();
		//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
		ДокументВозвратПоставщику.Товары.Очистить();
	КонецЕсли;
	
	ДокументВозвратПоставщику.Дата =  ЗаписываемыйДокумент.ДатаДокумента;
	
	//Заполним реквизиты документа
	ЗаполнениеДокументов.Заполнить(ДокументВозвратПоставщику, СформироватьСтруктуруЗаполнения(ЗаписываемыйДокумент, ДокументВозвратПоставщику), Истина);
	ЗаполнитьРеквизитыДокумента(ЗаписываемыйДокумент, ДокументВозвратПоставщику);
	
	//Получим табличную часть документа
	ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ЗаписываемыйДокумент.НомерДокумента));
	
	//Заполняем табличную часть документа
	ЗаполнитьТабличнуюЧастьТовары(ДокументВозвратПоставщику, ТоварыТЗ);	
	
	Попытка
		ДокументВозвратПоставщику.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
	Если СсылкаНаДокумент = Документы.ВозвратТоваровПоставщику.ПустаяСсылка() Тогда
		ЗаписатьИдентификаторСМ(ДокументВозвратПоставщику.Ссылка, ПолучитьДополнительноеСвойство("ВозвратТоваровПоставщику"), ЗаписываемыйДокумент.ИдентификаторСМ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСчетФактуры) Тогда
		ЗарегистрироватьСчетФактуруВыданный(ДокументВозвратПоставщику.Ссылка, НомерСчетФактуры); 
	КонецЕсли; 
	
	
КонецФункции

&НаСервере
Функция  ЗаписатьОприходованиеТоваров(ЗаписываемыйДокумент)
	
	СсылкаНаДокумент =  ЗаписываемыйДокумент.ДокументСсылка;
	
	Если СсылкаНаДокумент =   Документы.ОприходованиеТоваров.ПустаяСсылка() Тогда
		ДокументОприходованиеТоваров = Документы.ОприходованиеТоваров.СоздатьДокумент();
	Иначе
		ДокументОприходованиеТоваров = СсылкаНаДокумент.ПолучитьОбъект();
		//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
		ДокументОприходованиеТоваров.Товары.Очистить();
	КонецЕсли;
	
	ДокументОприходованиеТоваров.Дата = ЗаписываемыйДокумент.ДатаДокумента;
	ДокументОприходованиеТоваров.СтатьяПрочихДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.НайтиПоНаименованию("Доходы (расходы) по основному виду деятельности");
	
	//Заполним реквизиты  документа
	ЗаполнениеДокументов.Заполнить(ДокументОприходованиеТоваров, СформироватьСтруктуруЗаполнения(ЗаписываемыйДокумент,ДокументОприходованиеТоваров), Истина);
	ЗаполнитьРеквизитыДокумента(ЗаписываемыйДокумент, ДокументОприходованиеТоваров); 
	
	//Получим табличную часть документа
	ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ЗаписываемыйДокумент.НомерДокумента));
	//Заполняем табличную часть документа
	ЗаполнитьТабличнуюЧастьТовары(ДокументОприходованиеТоваров, ТоварыТЗ);	
	
	Попытка
		ДокументОприходованиеТоваров.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
	Если СсылкаНаДокумент = Документы.ОприходованиеТоваров.ПустаяСсылка() Тогда
		ЗаписатьИдентификаторСМ(ДокументОприходованиеТоваров.Ссылка, ПолучитьДополнительноеСвойство("ОприходованиеТоваров"), ЗаписываемыйДокумент.ИдентификаторСМ);
	КонецЕсли;
	
	
КонецФункции

&НаСервере
Функция ЗаписатьСписаниеТоваров(ЗаписываемыйДокумент)
	
	СсылкаНаДокумент =  ЗаписываемыйДокумент.ДокументСсылка;
	
	Если СсылкаНаДокумент =   Документы.СписаниеТоваров.ПустаяСсылка() Тогда
		ДокументСписаниеТоваров = Документы.СписаниеТоваров.СоздатьДокумент();
	Иначе
		ДокументСписаниеТоваров = СсылкаНаДокумент.ПолучитьОбъект();
		//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
		ДокументСписаниеТоваров.Товары.Очистить();
	КонецЕсли;
	
	ДокументСписаниеТоваров.Дата = ЗаписываемыйДокумент.ДатаДокумента;
	
	//Заполним реквизиты  документа	
	ЗаполнениеДокументов.Заполнить(ДокументСписаниеТоваров, СформироватьСтруктуруЗаполнения(ЗаписываемыйДокумент,ДокументСписаниеТоваров), Истина);
	ЗаполнитьРеквизитыДокумента(ЗаписываемыйДокумент, ДокументСписаниеТоваров);
	
	//Получим табличную часть документа
	ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ЗаписываемыйДокумент.НомерДокумента));
	
	//Заполняем табличную часть документа
	ЗаполнитьТабличнуюЧастьТовары(ДокументСписаниеТоваров, ТоварыТЗ);	
	
	Попытка
		ДокументСписаниеТоваров.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
	Если СсылкаНаДокумент = Документы.СписаниеТоваров.ПустаяСсылка() Тогда
		ЗаписатьИдентификаторСМ(ДокументСписаниеТоваров.Ссылка, ПолучитьДополнительноеСвойство("СписаниеТоваров"), ЗаписываемыйДокумент.ИдентификаторСМ);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьСписаниеТоваровЧерезОперацию(ЗаписываемыйДокумент)
	
	СсылкаНаДокумент =  ЗаписываемыйДокумент.ДокументСсылка;
	
	Если СсылкаНаДокумент =   Документы.ОперацияБух.ПустаяСсылка() Тогда
		Операция = Документы.ОперацияБух.СоздатьДокумент();
	Иначе
		Операция = СсылкаНаДокумент.ПолучитьОбъект();
	КонецЕсли;
	
	Операция.Дата = ЗаписываемыйДокумент.ДатаДокумента;
	Операция.Организация = ЗаписываемыйДокумент.Организация;
	Операция.СуммаОперации = ЗаписываемыйДокумент.СуммаДокументаСНДС;
	Операция.Комментарий = "Документ № " + ЗаписываемыйДокумент.НомерДокумента + " - загружен из Супермаг+";
	Операция.Содержание = "Cписание товаров(из Супермаг+)";
	Операция.Записать(РежимЗаписиДокумента.Запись);
	
	ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ЗаписываемыйДокумент.НомерДокумента));
	ТоварыТЗ.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	
	//Номенклатура для НДС
	НоменклатураПоНДС = Объект.НоменклатураДляСтавокНДС.Выгрузить();
	КомиссионнаяНоменклатураПоНДС 	= Объект.КомиссионаяНоменклатураДляСтавокНДС.Выгрузить();
	
	Для каждого тСтр Из ТоварыТЗ Цикл
		Если тСтр.СтавкаНДС = 18 Тогда
			ПоискПоНДС = НДС18;
		ИначеЕсли тСтр.СтавкаНДС = 10 Тогда 
			ПоискПоНДС = НДС10;
		Иначе
			ПоискПоНДС = БезНДС;
		КонецЕсли;
		НаборПроводок = Операция.Движения.Хозрасчетный;
		Проводка = НаборПроводок.Добавить();
		Проводка.Период = Операция.Дата;
		Если тСтр.ТоварСобственный Тогда
			Проводка.Содержание = "Списание товаров";
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("94");
			На41ВедетсяУчетПоСкладам = Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) <> Неопределено;
			Если На41ВедетсяУчетПоСкладам Тогда
				Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады] = ЗаписываемыйДокумент.Склад;
			КонецЕсли;
			Проводка.СчетКт = СчетУчетаТоваров;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = НоменклатураПоНДС.Найти(ПоискПоНДС).Номенклатура;
		Иначе
			Проводка.Содержание = "Списание товаров комитента";
			Проводка.СчетКт = СчетУчетаТоваровКомиссия;
			Проводка.СубконтоКТ[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = КомиссионнаяНоменклатураПоНДС.Найти(ПоискПоНДС).Номенклатура;
		КонецЕсли; 
		Проводка.КоличествоКт = тСтр.Количество;			
		Проводка.Сумма 		= ЗаписываемыйДокумент.СуммаДокументаСНДС;
		Проводка.СуммаНУКт 	= ЗаписываемыйДокумент.СуммаДокументаСНДС;
		НаборПроводок.Записать(Истина);
	КонецЦикла; 
	
	//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
	Если СсылкаНаДокумент = Документы.ОперацияБух.ПустаяСсылка() Тогда
		ЗаписатьИдентификаторСМ(Операция.Ссылка, ПолучитьДополнительноеСвойство("ОперацияБух"), ЗаписываемыйДокумент.ИдентификаторСМ);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьООП(ЗаписываемыйДокумент)
	
	СсылкаНаДокумент =  ЗаписываемыйДокумент.ДокументСсылка;
	
	Если СсылкаНаДокумент =  Документы.ОтчетОРозничныхПродажах.ПустаяСсылка() Тогда
		ДокументОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Иначе
		ДокументОтчетОРозничныхПродажах = СсылкаНаДокумент.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОтчетОРозничныхПродажах.Дата = ЗаписываемыйДокумент.ДатаДокумента;
	
	//Заполним реквизиты  документа
	ЗаполнениеДокументов.Заполнить(ДокументОтчетОРозничныхПродажах, СформироватьСтруктуруЗаполнения(ЗаписываемыйДокумент, ДокументОтчетОРозничныхПродажах), Истина);
	ЗаполнитьРеквизитыДокумента(ЗаписываемыйДокумент, ДокументОтчетОРозничныхПродажах);
	
	//Получим табличную часть документа
	ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ЗаписываемыйДокумент.НомерДокумента));
	ТоварыВозвратПокупателяТЗ = СпецификацииВозвратовОтПокупателя.Выгрузить(Новый Структура("ДокументПродажи", ЗаписываемыйДокумент.НомерДокумента)); 
	
	//Заполняем табличную часть документа
	ЗаполнитьТабличнуюЧастьПродажиТовары(ДокументОтчетОРозничныхПродажах, ТоварыТЗ, ТоварыВозвратПокупателяТЗ);
	
	//Заполним безналичные продажи
	СуммаБензаличныхПродаж = ПолучитьБезнал(ЗаписываемыйДокумент.НомерДокумента);
	Если НЕ СуммаБензаличныхПродаж = "" Тогда
		ДокументОтчетОРозничныхПродажах.Оплата.Очистить();
		ОплатаНоваяСтрока = ДокументОтчетОРозничныхПродажах.Оплата.Добавить();
		ОплатаНоваяСтрока.ВидОплаты 	= ВидОплатыБезнал;
		ОплатаНоваяСтрока.СуммаОплаты	= СуммаБензаличныхПродаж;          
	КонецЕсли;
	
	Попытка
		ДокументОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
	Если СсылкаНаДокумент = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка() Тогда
		ЗаписатьИдентификаторСМ(ДокументОтчетОРозничныхПродажах.Ссылка, ПолучитьДополнительноеСвойство("ОтчетОРозничныхПродажах"), ЗаписываемыйДокумент.ИдентификаторСМ);
	КонецЕсли;
	
КонецФункции 	

&НаСервере
Функция ЗаписатьРеализацияТоваров(ЗаписываемыйДокумент)
	
	СсылкаНаДокумент =  ЗаписываемыйДокумент.ДокументСсылка;
	
	Если СсылкаНаДокумент =   Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
		ДокументРеализацияТоваровУслуг = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Иначе
		ДокументРеализацияТоваровУслуг = СсылкаНаДокумент.ПолучитьОбъект();
		//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
		ДокументРеализацияТоваровУслуг.Товары.Очистить();
	КонецЕсли;
	
	ДокументРеализацияТоваровУслуг.Дата = ЗаписываемыйДокумент.ДатаДокумента;
	
	//Заполним реквизиты  документа
	ЗаполнениеДокументов.Заполнить(ДокументРеализацияТоваровУслуг, СформироватьСтруктуруЗаполнения(ЗаписываемыйДокумент, ДокументРеализацияТоваровУслуг), Истина);
	ЗаполнитьРеквизитыДокумента(ЗаписываемыйДокумент, ДокументРеализацияТоваровУслуг);
	
	//Получим табличную часть документа
	ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ЗаписываемыйДокумент.НомерДокумента));
	
	//Данная ТЗ, пустая и нужна только для передачи в ЗаполнитьТабличнуюЧастьПродажиТовары() в качестве параметра (возможно потом переделаю)
	ТзВозвраты = Новый ТаблицаЗначений;
	ТзВозвраты.Колонки.Добавить("СтавкаНДС");
	ТзВозвраты.Колонки.Добавить("ТоварСобственный");
	ТзВозвраты.Колонки.Добавить("Количество");
	ТзВозвраты.Колонки.Добавить("СуммаНДС");
	ТзВозвраты.Колонки.Добавить("СтоимостьСНалогами");
	
	//Заполняем табличную часть документа
	ЗаполнитьТабличнуюЧастьПродажиТовары(ДокументРеализацияТоваровУслуг, ТоварыТЗ, ТзВозвраты);	
	
	Попытка
		ДокументРеализацияТоваровУслуг.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
	Если СсылкаНаДокумент = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
		ЗаписатьИдентификаторСМ(ДокументРеализацияТоваровУслуг.Ссылка, ПолучитьДополнительноеСвойство("РеализацияТоваровУслуг"), ЗаписываемыйДокумент.ИдентификаторСМ);
	КонецЕсли;
	
КонецФункции

// Формирует структуру, с данными, необходимую для ЗаполнениеДокументов.Заполнить()
//
// Параметры:
//    ДокументСМ - СтрокаТабличнойЧасти - строка ТЧ с данными, по документу из Супермаг+
//    Документ1С  - ДокументОбъект - записываемый(заполняемый документ)
//
// Возвращаемое значение:
//   Струтура.СтруктураЗаполнения   - Структура  с данными по заполнению документа 
&НаСервере
Функция СформироватьСтруктуруЗаполнения(ДокументСМ, Документ1С)
	
	СтруктураЗаполнения = Новый  Структура;
	СтруктураЗаполнения.Вставить("Организация", ДокументСМ.Организация);
	СтруктураЗаполнения.Вставить("Контрагент", ДокументСМ.КонтрагентСсылка);
	СтруктураЗаполнения.Вставить("ДоговорКонтрагента", ДокументСМ.ДоговорПоставщика);
	СтруктураЗаполнения.Вставить("Ответственный", ПараметрыСеанса.ТекущийПользователь);
	СтруктураЗаполнения.Вставить("Склад", ДокументСМ.Склад);
	СтруктураЗаполнения.Вставить("ВалютаДокумента", Справочники.Валюты.НайтиПоКоду("643"));
	СтруктураЗаполнения.Вставить("СуммаВключаетНДС", Истина);
	СтруктураЗаполнения.Вставить("СуммаДокумента", ДокументСМ.СуммаДокументаСНДС);
	СтруктураЗаполнения.Вставить("СчетУчетаРасчетовПоПретензиям", СчетУчетаРасчетовПоПретензиям);
	Если ТипЗнч(Документ1С) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		СтруктураЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах);
	ИначеЕсли ТипЗнч(Документ1С) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда 
		СтруктураЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		СтруктураЗаполнения.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
	ИначеЕсли ТипЗнч(Документ1С) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда 
		СтруктураЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
	ИначеЕсли ТипЗнч(Документ1С) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда 
		СтруктураЗаполнения.Вставить("ВидОперации", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
	КонецЕсли; 
	СтруктураЗаполнения.Вставить("СчетКасса", СчетКасса);
	СтруктураЗаполнения.Вставить("СчетУчетаРасчетовСКонтрагентом", СчетУчетаРассчетовСКонтрагентами);
	//СтруктураЗаполнения.Вставить(, ДокументОснование.);
	
	Возврат СтруктураЗаполнения;
	
КонецФункции

//Заполним реквизиты, которые не заполнились Функцией Заполнить() модуля ЗаполнениеДокументов
&НаСервере
Функция ЗаполнитьРеквизитыДокумента(ДокументИзСМ, ДокументЗаполнения)
	
	мДок = Новый  Массив;
	мДок.Добавить(Тип("ДокументОбъект.СписаниеТоваров"));
	мДок.Добавить(Тип("ДокументОбъект.ОприходованиеТоваров"));
	
	ДокументЗаполнения.Комментарий = "Документ № " + ДокументИзСМ.НомерДокумента + " - загружен из Супермаг+";
	Если мДок.Найти(ТипЗнч(ДокументЗаполнения)) = Неопределено Тогда
		ДокументЗаполнения.СуммаВключаетНДС		= Истина;
		ДокументЗаполнения.СуммаДокумента		= ДокументИзСМ.СуммаДокументаСНДС;
	КонецЕсли; 
	
КонецФункции

//Заполним табличную часть "Товары" поступлений и возвратов от поставщика
&НаСервере
Функция ЗаполнитьТабличнуюЧастьТовары(Документ, ТаблицаТоваров)	
	
	//Номенклатура для НДС
	НоменклатураПоНДС = Объект.НоменклатураДляСтавокНДС.Выгрузить();
	//КомиссионнаяНоменклатураПоНДС 	= Объект.КомиссионаяНоменклатураДляСтавокНДС.Выгрузить();
	
	мТипыДокументов = Новый Массив;
	мТипыДокументов.Добавить(Тип("ДокументОбъект.ОприходованиеТоваров"));
	мТипыДокументов.Добавить(Тип("ДокументОбъект.СписаниеТоваров"));
	
	//Предварительно очистим табличную часть документа
	Документ.Товары.Очистить();
	
	Если СвернутьНоменклатуруДоНДС Тогда
		
		ТаблицаТоваров.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
		
		Для каждого тСтр Из ТаблицаТоваров Цикл
			
			Если тСтр.СтавкаНДС = 18 Тогда
				ПоискПоНДС = НДС18;
			ИначеЕсли тСтр.СтавкаНДС = 10 Тогда 
				ПоискПоНДС = НДС10;
			Иначе
				ПоискПоНДС = БезНДС;
			КонецЕсли;
			//Если СтрокаТовар.ТоварСобственный Тогда
			СтрокаНоменклатурыСНДС = НоменклатураПоНДС.Найти(ПоискПоНДС);
			//ТоварСчетУчета	= СчетУчетаТоваров;
			//Иначе 
			//	СтрокаНоменклатурыСНДС = 	КомиссионнаяНоменклатураПоНДС.Найти(ПоискПоНДС);	
			//	ТоварСчетУчета	= СчетУчетаТоваровКомиссия;
			//КонецЕсли;
			НоваяСтрокаТовар = Документ.Товары.Добавить();
			НоваяСтрокаТовар.Номенклатура   = СтрокаНоменклатурыСНДС.Номенклатура;
			НоваяСтрокаТовар.Количество		= тСтр.Количество;
			НоваяСтрокаТовар.СчетУчета		= СчетУчетаТоваров;
			НоваяСтрокаТовар.Цена			= (тСтр.Сумма/тСтр.Количество);
			НоваяСтрокаТовар.Сумма			= тСтр.Сумма;
			
			Если мТипыДокументов.Найти(ТипЗнч(Документ)) = Неопределено Тогда
				НоваяСтрокаТовар.СуммаНДС		= тСтр.СуммаНДС;
				НоваяСтрокаТовар.СчетУчетаНДС	= СчетУчетаНДС;
				НоваяСтрокаТовар.СтавкаНДС		= СтрокаНоменклатурыСНДС.СтавкаНДС;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого тСтр Из ТаблицаТоваров Цикл
			
			НоменклатураПоиск = ПолучитьНоменклатуру(тСтр);
			НоваяСтрокаТовар = Документ.Товары.Добавить();
			НоваяСтрокаТовар.Номенклатура   = НоменклатураПоиск.Ссылка;
			НоваяСтрокаТовар.Количество		= тСтр.Количество;
			НоваяСтрокаТовар.СчетУчета		= СчетУчетаТоваров;
			НоваяСтрокаТовар.Цена			= (тСтр.Сумма/тСтр.Количество);
			НоваяСтрокаТовар.Сумма			= тСтр.Сумма;
			
			Если мТипыДокументов.Найти(ТипЗнч(Документ)) = Неопределено Тогда
				НоваяСтрокаТовар.СуммаНДС		= тСтр.СуммаНДС;
				НоваяСтрокаТовар.СчетУчетаНДС	= СчетУчетаНДС;
				НоваяСтрокаТовар.СтавкаНДС		= НоменклатураПоиск.СтавкаНДС;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	
КонецФункции

//Заполним табличные части "Товары" и "Агентские услуги", в отчетах о розничных продажах и реализации
&НаСервере
Функция ЗаполнитьТабличнуюЧастьПродажиТовары(Документ, ТаблицаТоваров, тзВозвраты)
	
	#region рабочий_код_без_выделения_алкоголя
	
	тзВозвраты.Свернуть("СтавкаНДС, ТоварСобственный","Количество, СуммаНДС, СтоимостьСНалогами");
	
	//Номенклатура для НДС
	НоменклатураПоНДС 				= Объект.НоменклатураДляСтавокНДС.Выгрузить();
	КомиссионнаяНоменклатураПоНДС 	= Объект.КомиссионаяНоменклатураДляСтавокНДС.Выгрузить();
	
	//Предварительно очистим табличные части документа
	Документ.Товары.Очистить();
	Документ.АгентскиеУслуги.Очистить();
	
	//ЗапросТовары = Новый Запрос;
	//ЗапросТовары.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	//ЗапросТовары.Текст = 
	//"ВЫБРАТЬ
	//|	Товары.СтавкаНДС 		КАК СтавкаНДС,
	//|	Товары.Сумма 			КАК Сумма,
	//|	Товары.СуммаНДС 		КАК СуммаНДС,
	//|	Товары.ТоварСобственный	КАК ТоварСобственный,
	//|	Товары.Количество 		КАК Количество
	//|ПОМЕСТИТЬ Товары_ВТ
	//|ИЗ
	//|	&ТаблицаТоваров КАК Товары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Товары_ВТ.СтавкаНДС 		КАК СтавкаНДС,
	//|	Товары_ВТ.Сумма 			КАК Сумма,
	//|	Товары_ВТ.СуммаНДС			КАК СуммаНДС,
	//|	Товары_ВТ.ТоварСобственный	КАК ТоварСобственный,
	//|	Товары_ВТ.Количество		КАК Количество
	//|ИЗ
	//|	Товары_ВТ КАК Товары_ВТ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ Товары_ВТ" ;
	//
	//тзТовары = ЗапросТовары.Выполнить().Выгрузить(); 	
	//тзТовары.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	ТаблицаТоваров.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	
	тзТоварыДокумент = Новый ТаблицаЗначений;
	тзТоварыДокумент.Колонки.Добавить("Номенклатура");
	тзТоварыДокумент.Колонки.Добавить("СтавкаНДС");
	тзТоварыДокумент.Колонки.Добавить("СчетУчета");
	тзТоварыДокумент.Колонки.Добавить("СчетДоходов");
	тзТоварыДокумент.Колонки.Добавить("СчетРасходов");
	тзТоварыДокумент.Колонки.Добавить("СчетУчетаНДСПоРеализации");
	тзТоварыДокумент.Колонки.Добавить("Количество");
	тзТоварыДокумент.Колонки.Добавить("Цена");
	тзТоварыДокумент.Колонки.Добавить("Сумма");
	тзТоварыДокумент.Колонки.Добавить("СуммаНДС");
	
	тзАгентскиеУслуги = Новый ТаблицаЗначений;
	тзАгентскиеУслуги.Колонки.Добавить("Номенклатура");
	тзАгентскиеУслуги.Колонки.Добавить("СтавкаНДС");
	тзАгентскиеУслуги.Колонки.Добавить("Контрагент");
	тзАгентскиеУслуги.Колонки.Добавить("ДоговорКонтрагента");
	тзАгентскиеУслуги.Колонки.Добавить("СчетРасчетов");
	тзАгентскиеУслуги.Колонки.Добавить("Количество");
	тзАгентскиеУслуги.Колонки.Добавить("Цена");
	тзАгентскиеУслуги.Колонки.Добавить("Сумма");
	тзАгентскиеУслуги.Колонки.Добавить("СуммаНДС");
	
	Для каждого тСтрТовар Из ТаблицаТоваров Цикл
		//Для каждого тСтрТовар Из тзТовары Цикл
		
		Если тСтрТовар.СтавкаНДС = 18 Тогда
			ПоискПоНДС = НДС18;
		ИначеЕсли тСтрТовар.СтавкаНДС = 10 Тогда 
			ПоискПоНДС = НДС10;
		Иначе
			ПоискПоНДС = БезНДС;
		КонецЕсли;
		
		СтрокаПоискаВозврат = тзВозвраты.Найти(ПоискПоНДС); 
		
		Если тСтрТовар.ТоварСобственный Тогда
			
			СтрокаПоискНоменклатурыПоНДС = НоменклатураПоНДС.Найти(ПоискПоНДС);
			НоваяСтрокаТовар = тзТоварыДокумент.Добавить();
			НоваяСтрокаТовар.СтавкаНДС					= СтрокаПоискНоменклатурыПоНДС.СтавкаНДС;
			НоваяСтрокаТовар.Номенклатура   			= СтрокаПоискНоменклатурыПоНДС.Номенклатура;
			НоваяСтрокаТовар.СчетУчета					= СчетУчетаТоваров;
			НоваяСтрокаТовар.СчетДоходов				= СчетДоходов;
			НоваяСтрокаТовар.СчетРасходов				= СчетРасходов;
			НоваяСтрокаТовар.СчетУчетаНДСПоРеализации	= СчетУчетаНДС;
			
			Если СтрокаПоискаВозврат = Неопределено Тогда
				НоваяСтрокаТовар.Количество				= тСтрТовар.Количество;
				НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма/тСтрТовар.Количество);
				НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма;
				НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС;
			Иначе
				НоваяСтрокаТовар.Количество				= тСтрТовар.Количество - СтрокаПоискаВозврат.Количество;
				НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами)/тСтрТовар.Количество;
				НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами;
				НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС - СтрокаПоискаВозврат.СуммаНДС ;
				тзВозвраты.Удалить(СтрокаПоискаВозврат);
			КонецЕсли;
			
		Иначе 
			СтрокаПоискНоменклатурыПоНДС = КомиссионнаяНоменклатураПоНДС.Найти(ПоискПоНДС);
			НоваяСтрокаТовар = тзАгентскиеУслуги.Добавить();
			НоваяСтрокаТовар.СтавкаНДС			= СтрокаПоискНоменклатурыПоНДС.СтавкаНДС;
			НоваяСтрокаТовар.Номенклатура   	= СтрокаПоискНоменклатурыПоНДС.Номенклатура;
			НоваяСтрокаТовар.Контрагент			= Комитент;
			НоваяСтрокаТовар.ДоговорКонтрагента	= ДоговорКомиссии;
			НоваяСтрокаТовар.СчетРасчетов		= СчетУчетаРассчетовСКонтрагентами;
			
			Если СтрокаПоискаВозврат = Неопределено Тогда
				НоваяСтрокаТовар.Количество				= тСтрТовар.Количество;
				НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма/тСтрТовар.Количество);
				НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма;
				НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС;
			Иначе
				НоваяСтрокаТовар.Количество				= тСтрТовар.Количество-СтрокаПоискаВозврат.Количество;
				НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами)/(тСтрТовар.Количество-СтрокаПоискаВозврат.Количество);
				НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами;
				НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС - СтрокаПоискаВозврат.СуммаНДС ;
				тзВозвраты.Удалить(СтрокаПоискаВозврат);
			КонецЕсли;
			
		КонецЕсли; 
		
		СтрокаПоискаВозврат = Неопределено;
		
	КонецЦикла;
	
	Документ.Товары.Загрузить(тзТоварыДокумент);
	Документ.АгентскиеУслуги.Загрузить(тзАгентскиеУслуги);
	
	#endregion
	
	#Область старый_код_с_разбивкой_по_алкоголю
	////Номенклатура для НДС
	//НоменклатураПоНДС 				= Объект.НоменклатураДляСтавокНДС.Выгрузить();
	//КомиссионнаяНоменклатураПоНДС 	= Объект.КомиссионаяНоменклатураДляСтавокНДС.Выгрузить();
	//
	////Предварительно очистим табличные части документа
	//Документ.Товары.Очистить();
	//Документ.АгентскиеУслуги.Очистить();
	//
	//ЗапросВозвраты = Новый Запрос;
	//ЗапросВозвраты.УстановитьПараметр("ВозвратыПокупателяТЗ", ТоварыВозвратПокупателяТЗ);
	//ЗапросВозвраты.Текст = 
	//"ВЫБРАТЬ
	//|	ВозвратыПокупателяТЗ.СтавкаНДС 			КАК СтавкаНДС,
	//|	ВозвратыПокупателяТЗ.СуммаНДС 			КАК СуммаНДС,
	//|	ВозвратыПокупателяТЗ.Алкоголь 			КАК Алкоголь,
	//|	ВозвратыПокупателяТЗ.СтоимостьСНалогами КАК СтоимостьСНалогами,
	//|	ВозвратыПокупателяТЗ.Количество 		КАК Количество
	//|ПОМЕСТИТЬ ВозвратыПокупателя_ВТ
	//|ИЗ
	//|	&ВозвратыПокупателяТЗ КАК ВозвратыПокупателяТЗ
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВозвратыПокупателя_ВТ.СтавкаНДС 			КАК СтавкаНДС,
	//|	ВозвратыПокупателя_ВТ.СуммаНДС 				КАК СуммаНДС,
	//|	ВозвратыПокупателя_ВТ.Алкоголь 				КАК Алкоголь,
	//|	ВозвратыПокупателя_ВТ.СтоимостьСНалогами	КАК СтоимостьСНалогами,
	//|	ВозвратыПокупателя_ВТ.Количество 			КАК Количество
	//|ИЗ
	//|	ВозвратыПокупателя_ВТ КАК ВозвратыПокупателя_ВТ
	//|ГДЕ
	//|	ВозвратыПокупателя_ВТ.Алкоголь <> """"
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ ВозвратыПокупателя_ВТ";
	//
	//ВозвратыАлкогольТЗ = ЗапросВозвраты.Выполнить().Выгрузить();
	//ВозвратыАлкогольТЗ.Свернуть("СтавкаНДС","Количество, СуммаНДС, СтоимостьСНалогами");
	//
	////Меняем условие отбора по алкоголю на без алкоголь
	//ЗапросВозвраты.Текст = СтрЗаменить(ЗапросВозвраты.Текст,"<>","=");
	//
	//ВозвратыБезАлкогольТЗ = ЗапросВозвраты.Выполнить().Выгрузить();
	//ВозвратыБезАлкогольТЗ.Свернуть("СтавкаНДС","Количество, СуммаНДС, СтоимостьСНалогами");
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Товары.СтавкаНДС 		КАК СтавкаНДС,
	//|	Товары.Сумма 			КАК Сумма,
	//|	Товары.СуммаНДС 		КАК СуммаНДС,
	//|	Товары.Алкоголь 		КАК Алкоголь,
	//|	Товары.ТоварСобственный	КАК ТоварСобственный,
	//|	Товары.Количество 		КАК Количество
	//|ПОМЕСТИТЬ Товары_ВТ
	//|ИЗ
	//|	&ТаблицаТоваров КАК Товары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Товары_ВТ.СтавкаНДС 		КАК СтавкаНДС,
	//|	Товары_ВТ.Сумма 			КАК Сумма,
	//|	Товары_ВТ.СуммаНДС			КАК СуммаНДС,
	//|	Товары_ВТ.Алкоголь 			КАК Алкоголь,
	//|	Товары_ВТ.ТоварСобственный	КАК ТоварСобственный,
	//|	Товары_ВТ.Количество		КАК Количество
	//|ИЗ
	//|	Товары_ВТ КАК Товары_ВТ
	//|ГДЕ
	//|	Товары_ВТ.Алкоголь <> """"
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|УНИЧТОЖИТЬ Товары_ВТ" ;
	//
	//ТаблицаАлкоголь = Запрос.Выполнить().Выгрузить(); 	
	//ТаблицаАлкоголь.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	//
	//СтрокаПоискаВозвратАлкоголь = ВозвратыАлкогольТЗ.Найти(НоменклатураДляАлкоголя.СтавкаНДС); 
	//Для каждого АлкогольСтр Из ТаблицаАлкоголь Цикл
	//	
	//	Если АлкогольСтр.ТоварСобственный Тогда
	//		НоваяСтрокаТовар = Документ.Товары.Добавить();
	//		НоваяСтрокаТовар.СтавкаНДС					= НоменклатураДляАлкоголя.СтавкаНДС;
	//		НоваяСтрокаТовар.Номенклатура   			= НоменклатураДляАлкоголя.Ссылка;
	//		НоваяСтрокаТовар.СчетУчета					= СчетУчетаТоваров;
	//		НоваяСтрокаТовар.СчетДоходов				= СчетДоходовАлкоголь;
	//		НоваяСтрокаТовар.СчетРасходов				= СчетРасходов;
	//		НоваяСтрокаТовар.СчетУчетаНДСПоРеализации	= СчетУчетаНДСАлкоголь;
	//		
	//		Если СтрокаПоискаВозвратАлкоголь = Неопределено Тогда
	//			НоваяСтрокаТовар.Количество				= АлкогольСтр.Количество;
	//			НоваяСтрокаТовар.Цена					= (АлкогольСтр.Сумма/АлкогольСтр.Количество);
	//			НоваяСтрокаТовар.Сумма					= АлкогольСтр.Сумма;
	//			НоваяСтрокаТовар.СуммаНДС				= АлкогольСтр.СуммаНДС;
	//		Иначе
	//			НоваяСтрокаТовар.Количество				= ?(АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество < 0,1,АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество);
	//			НоваяСтрокаТовар.Цена					= (АлкогольСтр.Сумма - СтрокаПоискаВозвратАлкоголь.СтоимостьСНалогами)/(АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество);
	//			НоваяСтрокаТовар.Сумма					= АлкогольСтр.Сумма - СтрокаПоискаВозвратАлкоголь.СтоимостьСНалогами;
	//			НоваяСтрокаТовар.СуммаНДС				= АлкогольСтр.СуммаНДС - СтрокаПоискаВозвратАлкоголь.СуммаНДС ;
	//		КонецЕсли;
	//		
	//	Иначе
	//		НоваяСтрокаТовар = Документ.АгентскиеУслуги.Добавить();
	//		НоваяСтрокаТовар.СтавкаНДС					= НоменклатураДляАлкоголя.СтавкаНДС;
	//		НоваяСтрокаТовар.Номенклатура   			= НоменклатураДляАлкоголя.Ссылка;
	//		НоваяСтрокаТовар.Контрагент					= Объект.Комитент;
	//		НоваяСтрокаТовар.ДоговорКонтрагента			= ДоговорКомиссии;
	//		НоваяСтрокаТовар.СчетРасчетов				= СчетУчетаРассчетовСКонтрагентами;
	//		
	//		//СтрокаПоискаВозвратАлкоголь = ВозвратыАлкогольТЗ.Найти(НоменклатураДляАлкоголя.СтавкаНДС); 
	//		Если СтрокаПоискаВозвратАлкоголь = Неопределено Тогда
	//			НоваяСтрокаТовар.Количество				= АлкогольСтр.Количество;
	//			НоваяСтрокаТовар.Цена					= (АлкогольСтр.Сумма/АлкогольСтр.Количество);
	//			НоваяСтрокаТовар.Сумма					= АлкогольСтр.Сумма;
	//			НоваяСтрокаТовар.СуммаНДС				= АлкогольСтр.СуммаНДС;
	//		Иначе
	//			НоваяСтрокаТовар.Количество				= ?(АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество < 0,1,АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество);
	//			НоваяСтрокаТовар.Цена					= (АлкогольСтр.Сумма - СтрокаПоискаВозвратАлкоголь.СтоимостьСНалогами)/(АлкогольСтр.Количество-СтрокаПоискаВозвратАлкоголь.Количество);
	//			НоваяСтрокаТовар.Сумма					= АлкогольСтр.Сумма - СтрокаПоискаВозвратАлкоголь.СтоимостьСНалогами;
	//			НоваяСтрокаТовар.СуммаНДС				= АлкогольСтр.СуммаНДС - СтрокаПоискаВозвратАлкоголь.СуммаНДС ;
	//		КонецЕсли; 
	//		
	//		
	//	КонецЕсли; 
	//	
	//КонецЦикла;
	//
	////Меняем условие отбора по алкоголю на без алкоголь
	//Запрос.Текст = СтрЗаменить(Запрос.Текст,"<>","=");
	//
	//ТаблицаБезАлкоголь = Запрос.Выполнить().Выгрузить();
	//ТаблицаБезАлкоголь.Свернуть("СтавкаНДС, ТоварСобственный","Количество, Сумма, СуммаНДС");
	//
	//Для каждого тСтрТовар Из ТаблицаБезАлкоголь Цикл
	//	
	//	Если тСтрТовар.СтавкаНДС = 18 Тогда
	//		ПоискПоНДС = НДС18;
	//	ИначеЕсли тСтрТовар.СтавкаНДС = 10 Тогда 
	//		ПоискПоНДС = НДС10;
	//	Иначе
	//		ПоискПоНДС = БезНДС;
	//	КонецЕсли;
	//	
	//	Если тСтрТовар.ТоварСобственный Тогда
	//		
	//		СтрокаПоискНоменклатурыПоНДС = НоменклатураПоНДС.Найти(ПоискПоНДС);
	//		НоваяСтрокаТовар = Документ.Товары.Добавить();
	//		НоваяСтрокаТовар.СтавкаНДС		= СтрокаПоискНоменклатурыПоНДС.СтавкаНДС;
	//		НоваяСтрокаТовар.Номенклатура   = СтрокаПоискНоменклатурыПоНДС.Номенклатура;
	//		//НоваяСтрокаТовар.Количество		= тСтрТовар.Количество;
	//		НоваяСтрокаТовар.СчетУчета		= СчетУчетаТоваровКомиссия;
	//		НоваяСтрокаТовар.СчетДоходов	= СчетДоходов;
	//		
	//		СтрокаПоискаВозврат = ВозвратыБезАлкогольТЗ.Найти(ПоискПоНДС); 
	//		
	//		Если СтрокаПоискаВозврат = Неопределено Тогда
	//			НоваяСтрокаТовар.Количество				= тСтрТовар.Количество;
	//			НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма/тСтрТовар.Количество);
	//			НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма;
	//			НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС;
	//		Иначе
	//			НоваяСтрокаТовар.Количество				= тСтрТовар.Количество-СтрокаПоискаВозврат.Количество;
	//			НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами)/тСтрТовар.Количество;
	//			НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами;
	//			НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС - СтрокаПоискаВозврат.СуммаНДС ;
	//		КонецЕсли;
	//		
	//	Иначе 
	//		СтрокаПоискНоменклатурыПоНДС = КомиссионнаяНоменклатураПоНДС.Найти(ПоискПоНДС);
	//		НоваяСтрокаТовар = Документ.АгентскиеУслуги.Добавить();
	//		НоваяСтрокаТовар.СтавкаНДС			= СтрокаПоискНоменклатурыПоНДС.СтавкаНДС;
	//		НоваяСтрокаТовар.Номенклатура   	= СтрокаПоискНоменклатурыПоНДС.Номенклатура;
	//		НоваяСтрокаТовар.Количество			= тСтрТовар.Количество;
	//		НоваяСтрокаТовар.Контрагент			= Объект.Комитент;
	//		НоваяСтрокаТовар.ДоговорКонтрагента	= ДоговорКомиссии;
	//		НоваяСтрокаТовар.СчетРасчетов		= СчетУчетаРассчетовСКонтрагентами;
	//		
	//		СтрокаПоискаВозврат = ВозвратыБезАлкогольТЗ.Найти(ПоискПоНДС); 
	//		
	//		Если СтрокаПоискаВозврат = Неопределено Тогда
	//			НоваяСтрокаТовар.Количество				= тСтрТовар.Количество;
	//			НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма/тСтрТовар.Количество);
	//			НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма;
	//			НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС;
	//		Иначе
	//			НоваяСтрокаТовар.Количество				= тСтрТовар.Количество-СтрокаПоискаВозврат.Количество;
	//			НоваяСтрокаТовар.Цена					= (тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами)/(тСтрТовар.Количество-СтрокаПоискаВозврат.Количество);
	//			НоваяСтрокаТовар.Сумма					= тСтрТовар.Сумма - СтрокаПоискаВозврат.СтоимостьСНалогами;
	//			НоваяСтрокаТовар.СуммаНДС				= тСтрТовар.СуммаНДС - СтрокаПоискаВозврат.СуммаНДС ;
	//		КонецЕсли;
	//		
	//	КонецЕсли; 
	//	
	//	СтрокаПоискаВозврат = Неопределено;
	//	
	//КонецЦикла;
	#КонецОбласти
	
КонецФункции

&НаСервере
Функция ПолучитьСоответсвиеДокумента(ТипДокументаПоиск)
	
	ТипДокументаСоответствие = Новый Соответствие;
	ТипДокументаСоответствие.Вставить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"),	"ПоступлениеТоваровУслуг");
	ТипДокументаСоответствие.Вставить(Тип("ДокументСсылка.РеализацияТоваровУслуг"),		"РеализацияТоваровУслуг");
	ТипДокументаСоответствие.Вставить(Тип("ДокументСсылка.ОприходованиеТоваров"),		"ОприходованиеТоваров");
	ТипДокументаСоответствие.Вставить(Тип("ДокументСсылка.СписаниеТоваров"),			"СписаниеТоваров");
	ТипДокументаСоответствие.Вставить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"),	"ВозвратТоваровПоставщику");
	ТипДокументаСоответствие.Вставить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"),	"ОтчетОРозничныхПродажах");
	ТипДокументаСоответствие.Вставить(Тип("ДокументСсылка.ОперацияБух"),				"ОперацияБух");
	Возврат ТипДокументаСоответствие.Получить(ТипДокументаПоиск);
	
КонецФункции

#Область old 
#Область получении_спецификаций_по_всем_записываемым_документам

////Получение Табличных частей документов (SMSPEC)
//&НаСервере
//Функция ПолучитьСпецификацииДокументов(ТипДокументаОтбор)
//	
//	//Очистим табличную часть, чтобы не задублировались данные при повторных загрузках
//	СпецификацииДокументов.Очистить();
//	
//	//Получим список записываемых документов
//	Отбор = Новый Структура;
//	Отбор.Вставить("Флаг", Истина);
//	Отбор.Вставить("ТипДокумента", СтрЗаменить(ТипДокументаОтбор, "'", ""));
//	МассивЗагружаемыхДокументов = Объект.Документы.Выгрузить(Отбор).ВыгрузитьКолонку("НомерДокумента");
//	
//	//Разложим массив на строку, для формирования отбора в SQL запросе
//	ДокументыОтбор = МассивВСтрокуЗапроса(МассивЗагружаемыхДокументов);
//	
//	//Формируем текст запроса
//	ТекстЗапроса = 
//	"SELECT
//	|      SMCARD.NAME 				AS ""НаименованиеНоменклатуры"",
//	|      SMCARD.IDSPIRITCODE		AS ""Алкоголь"",
//	|      SMCARD.IDCLASS			AS ""КодГруппы"",
//	|	   SMSPECTAX.TAXRATE        AS ""СтавкаНДС"",
//	|	   SMSPECTAX.TAXSUM        	AS ""СуммаНДС"",
//	|      SMSPEC.DOCID 			AS ""НомерДокумента"",  
//	|      SMSPEC.ARTICLE			AS ""Артикул"",
//	|	   SMSPEC.SPECITEM 			AS ""ВнутреннийНомерПозиции"", 
//	|      SMSPEC.QUANTITY 			AS ""Количество"",
//	|      SMSPEC.ITEMPRICE 		AS ""ЦенаСНалогами"",
//	|      SMSPEC.TOTALPRICE 		AS ""СтоимостьСНалогами"",
//	|      SMSPEC.ITEMPRICENOTAX 	AS ""ЦенаБезНалогов"",
//	|      SMSPEC.TOTALPRICENOTAX 	AS ""СуммаБезНалогов""
//	|FROM 
//	|	   	SUPERMAG.SMSPEC
//	|LEFT JOIN
//	|	   SUPERMAG.SMSPECTAX ON SMSPECTAX.DOCID = SMSPEC.DOCID  AND SMSPECTAX.SPECITEM = SMSPEC.SPECITEM  AND SMSPECTAX.DOCTYPE = SMSPEC.DOCTYPE
//	|LEFT JOIN
//	|	   	SUPERMAG.SMCARD 		ON  SMSPEC.ARTICLE = SMCARD.ARTICLE
//	|WHERE  
//	|		SMSPEC.DOCID 			IN ("+ДокументыОтбор+") AND SMSPEC.DOCTYPE = "+Строка(ТипДокументаОтбор)+""; 
//	
//	//Подключаемся (к Oracle БД)и выполняем запрос
//	Connection = Подключиться_к_БД_Oracle();	
//	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
//	
//	While NOT RecordSet.EOF Do
//		
//		НоваяСтрока = СпецификацииДокументов.Добавить();
//		НоваяСтрока.НомерДокумента 				= RecordSet.Fields("НомерДокумента").Value;
//		НоваяСтрока.Артикул		 				= RecordSet.Fields("Артикул").Value;
//		НоваяСтрока.ВнутреннийНомерПозиции		= RecordSet.Fields("ВнутреннийНомерПозиции").Value;
//		НоваяСтрока.Номенклатура				= RecordSet.Fields("НаименованиеНоменклатуры").Value;
//		НоваяСтрока.КодГруппы					= RecordSet.Fields("КодГруппы").Value;
//		НоваяСтрока.Количество	 				= RecordSet.Fields("Количество").Value;
//		НоваяСтрока.ЦенаБезНДС		 			= RecordSet.Fields("ЦенаБезНалогов").Value;
//		НоваяСтрока.СуммаБезНДС	 				= Формат(?(RecordSet.Fields("СуммаБезНалогов").Value = NULL, 0,RecordSet.Fields("СуммаБезНалогов").Value),"ЧЦ=20; ЧДЦ=2");
//		НоваяСтрока.Цена		 				= RecordSet.Fields("ЦенаСНалогами").Value;
//		НоваяСтрока.Сумма			 			= RecordSet.Fields("СтоимостьСНалогами").Value;
//		НоваяСтрока.Алкоголь					= RecordSet.Fields("Алкоголь").Value;
//		НоваяСтрока.СтавкаНДС 					= RecordSet.Fields("СтавкаНДС").Value;
//		НоваяСтрока.СуммаНДС					= RecordSet.Fields("СуммаНДС").Value;
//		НоваяСтрока.СчетУчета 					= СчетУчетаТоваров;
//		НоваяСтрока.СчетУчетаНДС				= СчетУчетаНДС;
//		
//		RecordSet.MoveNext();
//		
//	EndDo;
//	
//	RecordSet.Close();
//	Connection.Close();
//	
//	//Проставим флаг на собственный товар
//	тзСпецификацииДокументов = РеквизитФормыВЗначение("СпецификацииДокументов");
//	ЗаполнитьПризнакТовараСобственныйКомисссия(тзСпецификацииДокументов);
//	ЗначениеВРеквизитФормы(тзСпецификацииДокументов,"СпецификацииДокументов");
//	
//	МассивЗагружаемыхДокументов.Очистить();
//	
//КонецФункции

#КонецОбласти 
#Область  старый_код_записи_документов

//&НаСервере
//Функция ЗаписатьПоступленияОтПоставщика()
//	
//	ВыбраныеДокументыОтбор = Новый Структура("Флаг",Истина ); 
//	ЗаписываемыеДокументыТЗ = Объект.Документы.Выгрузить(ВыбраныеДокументыОтбор,);	
//	ЗаписанныеДокументы.Очистить();
//	
//	//Записываем поступления от поставщиков ('WI')
//	Для каждого ДокументСтрока Из ЗаписываемыеДокументыТЗ Цикл
//		
//		СсылкаНаДокумент =  ДокументСтрока.ДокументСсылка;
//		
//		//Получем номера и даты счет-фактуры и накладной поставщика
//		НакладнаяСчетФактура = ПолучитьНакладнуюСчетФактуруПолученныйИзСМ(ДокументСтрока.НомерДокумента);
//		Если НакладнаяСчетФактура.Количество() > 0 Тогда
//			НомерСчетФактуры			= НакладнаяСчетФактура[0];
//			ДатаСчетФактуры				= НакладнаяСчетФактура[1];
//			НомерНакладнойПоставщика 	= НакладнаяСчетФактура[2];
//			ДатаНакладнойПоставщика		= НакладнаяСчетФактура[3];
//		КонецЕсли; 
//		
//		Если СсылкаНаДокумент =  Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда
//			ДокументПоступления =  Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
//		Иначе
//			ДокументПоступления = СсылкаНаДокумент.ПолучитьОбъект();
//			//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
//			ДокументПоступления.Товары.Очистить();
//		КонецЕсли;
//		
//		//Заполним основные (общие) реквизиты шапки документа
//		ЗаполнитьШапкуДокумента(ДокументСтрока, ДокументПоступления);
//		
//		//Дозаполним реквизиты шапки
//		ДокументПоступления.ВидОперации 				= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
//		ДокументПоступления.НомерВходящегоДокумента		= НомерНакладнойПоставщика;
//		ДокументПоступления.ДатаВходящегоДокумента      = ДатаНакладнойПоставщика;
//		
//		//Получим табличную часть документа
//		ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ДокументСтрока.НомерДокумента),);
//		
//		//Заполним табличную часть документа
//		ЗаполнитьТабличнуюЧастьТовары(ДокументПоступления, ТоварыТЗ);
//		
//		//Попытаемся записать документ
//		Попытка
//			ДокументПоступления.Записать(РежимЗаписиДокумента.Запись);
//			НоваяСтрокаДокЗаписан  = ЗаписанныеДокументы.Добавить();
//			НоваяСтрокаДокЗаписан.Документ = ДокументПоступления.Ссылка;
//		Исключение
//			Сообщить(ОписаниеОшибки());
//		КонецПопытки;
//		
//		//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
//		//Если СсылкаНаДокумент = Документы[ДокументТип].ПустаяСсылка() Тогда
//		Если СсылкаНаДокумент = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка() Тогда
//			ЗаписатьИдентификаторСМ(ДокументПоступления.Ссылка, ДополнительноеСвойство, ДокументСтрока.ИдентификаторСМ);
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(НомерСчетФактуры) Тогда
//			ЗарегистрироватьСчетФактуруПолученный(ДокументПоступления.Ссылка, НомерСчетФактуры, ДатаСчетФактуры); 
//		КонецЕсли; 
//		
//	КонецЦикла;
//	
//КонецФункции 

//&НаСервере
//Функция ЗаписатьВозвратыОтПоставщика()
//	
//	ВыбраныеДокументыОтбор = Новый Структура("Флаг", Истина); 
//	ЗаписываемыеДокументыТЗ = Объект.Документы.Выгрузить(ВыбраныеДокументыОтбор,);	
//	ЗаписанныеДокументы.Очистить();
//	
//	//Записываем возвраты поставщику ('WO')
//	Для каждого ДокументСтрока Из ЗаписываемыеДокументыТЗ Цикл
//		
//		//Получем номера и дат счет-фактуры 	
//		НакладнаяСчетФактура = ПолучитьСчетФактуруВыданныйИзСМ(ДокументСтрока.НомерДокумента);
//		Если НакладнаяСчетФактура.Количество() > 0 Тогда
//			НомерСчетФактуры			= НакладнаяСчетФактура[0];
//			ДатаСчетФактуры				= НакладнаяСчетФактура[1];
//		КонецЕсли; 
//		
//		СсылкаНаДокумент =  ДокументСтрока.ДокументСсылка;
//		
//		Если СсылкаНаДокумент =  Документы[ДокументТип].ПустаяСсылка() Тогда
//			ДокументВозвратПоставщику = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
//		Иначе
//			ДокументВозвратПоставщику = СсылкаНаДокумент.ПолучитьОбъект();
//			//Очищаем табличную часть, документа, "Товары", чтобы потом записать новые данные
//			ДокументВозвратПоставщику.Товары.Очистить();
//		КонецЕсли;
//		
//		//Заполним основные (общие) реквизиты шапки документа
//		ЗаполнитьШапкуДокумента(ДокументСтрока, ДокументВозвратПоставщику);
//		
//		//Дозаполним реквизиты шапки
//		ДокументВозвратПоставщику.ВидОперации 						= Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
//		ДокументВозвратПоставщику.СчетУчетаРасчетовПоПретензиям		= СчетУчетаРасчетовПоПретензиям;
//		
//		//Получим табличную часть документа
//		ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ДокументСтрока.НомерДокумента),);
//		
//		//Заполняем табличную часть документа
//		ЗаполнитьТабличнуюЧастьТовары(ДокументВозвратПоставщику, ТоварыТЗ);		
//		Попытка
//			ДокументВозвратПоставщику.Записать(РежимЗаписиДокумента.Запись);
//			НоваяСтрокаДокЗаписан  = ЗаписанныеДокументы.Добавить();
//			НоваяСтрокаДокЗаписан.Документ = ДокументВозвратПоставщику.Ссылка;
//		Исключение
//			Сообщить(ОписаниеОшибки());
//		КонецПопытки;
//		
//		//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
//		Если СсылкаНаДокумент = Документы[ДокументТип].ПустаяСсылка() Тогда
//			ЗаписатьИдентификаторСМ(ДокументВозвратПоставщику.Ссылка, ДополнительноеСвойство, ДокументСтрока.ИдентификаторСМ);
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(НомерСчетФактуры) Тогда
//			ЗарегистрироватьСчетФактуруВыданный(ДокументВозвратПоставщику.Ссылка, НомерСчетФактуры); 
//		КонецЕсли; 
//		
//	КонецЦикла;
//	
//КонецФункции 

//&НаСервере
//Функция ЗаписатьРозничныеПродажи()
//	
//	ЗаписываемыеДокументыТЗ = Объект.Документы.Выгрузить(Новый Структура("Флаг", Истина),);	
//	ЗаписанныеДокументы.Очистить();
//	
//	//Записываем документы отчет о розничных продажах
//	Для каждого ДокументСтрока Из ЗаписываемыеДокументыТЗ Цикл
//		
//		СсылкаНаДокумент =  ДокументСтрока.ДокументСсылка;
//		
//		Если СсылкаНаДокумент =  Документы[ДокументТип].ПустаяСсылка() Тогда
//			ДокументОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
//		Иначе
//			ДокументОтчетОРозничныхПродажах = СсылкаНаДокумент.ПолучитьОбъект();
//		КонецЕсли;
//		
//		//Заполним основные (общие) реквизиты шапки документа
//		ЗаполнитьШапкуДокумента(ДокументСтрока, ДокументОтчетОРозничныхПродажах);
//		
//		//Дозаполним реквизиты шапки
//		ДокументОтчетОРозничныхПродажах.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
//		
//		//Получим табличную часть документа
//		ТоварыТЗ = СпецификацииДокументов.Выгрузить(Новый Структура("НомерДокумента", ДокументСтрока.НомерДокумента),);
//		ТоварыВозвратПокупателяТЗ = СпецификацииВозвратовОтПокупателя.Выгрузить(Новый Структура("ДокументПродажи",ДокументСтрока.НомерДокумента ),); 
//		
//		//Заполняем табличную часть документа
//		ЗаполнитьТабличнуюЧастьПродажиТовары(ДокументОтчетОРозничныхПродажах, ТоварыТЗ, ТоварыВозвратПокупателяТЗ);
//		
//		//Заполним безналичные продажи
//		СуммаБензаличныхПродаж = ПолучитьБезнал(ДокументСтрока.НомерДокумента);
//		
//		Если СуммаБензаличныхПродаж <> "" Тогда
//			ДокументОтчетОРозничныхПродажах.Оплата.Очистить();
//			ОплатаНоваяСтрока = ДокументОтчетОРозничныхПродажах.Оплата.Добавить();
//			ОплатаНоваяСтрока.ВидОплаты 	= ВидОплатыБезнал;
//			ОплатаНоваяСтрока.СуммаОплаты	= СуммаБензаличныхПродаж;          
//		КонецЕсли;
//		
//		Попытка
//			ДокументОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
//			НоваяСтрокаДокЗаписан  = ЗаписанныеДокументы.Добавить();
//			НоваяСтрокаДокЗаписан.Документ = ДокументОтчетОРозничныхПродажах.Ссылка;
//		Исключение
//			Сообщить(ОписаниеОшибки());
//		КонецПопытки;
//		
//		//Если это новый документ, то присвоим и запишем ему дополнительное свойство "Идентификатор СМ"
//		Если СсылкаНаДокумент = Документы[ДокументТип].ПустаяСсылка() Тогда
//			ЗаписатьИдентификаторСМ(ДокументОтчетОРозничныхПродажах.Ссылка, ДополнительноеСвойство, ДокументСтрока.ИдентификаторСМ);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецФункции 	

#КонецОбласти 
#КонецОбласти

#КонецОбласти


#Область Работа_со_справочниками_идентификаторами

&НаСервере
Функция ПолучитьОперацииИзСМ()
	
	//Сопаставим код операции из Супермага, с операциями(документами) 1С
	ОперацииСиноним = Новый Соответствие;
	ОперацииСиноним.Вставить("0","Поступления");
	ОперацииСиноним.Вставить("1","Реализация, Отчет о розничных продажах");
	ОперацииСиноним.Вставить("2","Возврат поставщику");
	//ОперацииСиноним.Вставить("3","");
	//ОперацииСиноним.Вставить("4","");
	//ОперацииСиноним.Вставить("5","");
	//ОперацииСиноним.Вставить("6","");
	ОперацииСиноним.Вставить("7","Списание товаров");
	ОперацииСиноним.Вставить("8","Списание товаров");
	ОперацииСиноним.Вставить("9","Оприходование товаров");
	
	НеИспользуемыеОперации = Новый Массив;
	НеИспользуемыеОперации.Добавить(-1);
	НеИспользуемыеОперации.Добавить(3);
	НеИспользуемыеОперации.Добавить(4);
	НеИспользуемыеОперации.Добавить(5);
	НеИспользуемыеОперации.Добавить(6);
	
	ТекстЗапроса =
	"SELECT 
	|	NAME	AS ""НаименованиеОперации"",
	|	ID		AS ""КодОперации""
	|FROM
	|	SUPERMAG.SAOPERATION
	|WHERE ID < 10 AND ID NOT IN ("+МассивВСтрокуЗапроса(НеИспользуемыеОперации)+")";
	
	//Подключаемся (к Oracle БД)и выполняем запрос
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	While  NOT RecordSet.EOF Do
		нСтрока = Операции.Добавить();
		нСтрока.Операция 	= RecordSet.Fields("НаименованиеОперации").Value;
		нСтрока.КодОперации = Формат(RecordSet.Fields("КодОперации").Value,"ЧЦ=2; ЧН=0");
		нСтрока.Операция1С 	= ОперацииСиноним.Получить(Строка(RecordSet.Fields("КодОперации").Value));
		RecordSet.MoveNext();
	EndDo;
	
	RecordSet.Close();
	Connection.Close();
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСкладыИзСупермага(Команда)
	
	ПолучитьСкладыИзСупермагаНаСервере();
	
КонецПроцедуры

//Получим склады с их идентификаторами из Супермаг+ (необходимо для отбора по магазину)
&НаСервере
Функция ПолучитьСкладыИзСупермагаНаСервере()
	
	ТекстЗапроса =
	"SELECT
	|	NAME 	AS ""НаименованиеСклада"",
	|   ID 		AS ""Идентификатор"" 
	|FROM 
	|	SUPERMAG.SMSTORELOCATIONS";
	
	Connection = Подключиться_к_БД_Oracle();
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	While  NOT RecordSet.EOF Do
		НоваяСтрока = Объект.ИдентификаторыСкладов.Добавить();
		НоваяСтрока.Склад 				= Справочники.Склады.ПустаяСсылка();
		НоваяСтрока.НаименованиеСклада  = RecordSet.Fields("НаименованиеСклада").Value;
		НоваяСтрока.Идентификатор		= RecordSet.Fields("Идентификатор").Value;
		НоваяСтрока.Флаг				= Ложь;
		RecordSet.MoveNext();
	EndDo;
	
	RecordSet.Close();
	Connection.Close();
	
КонецФункции

// В данной функции мы созадем и заполняем массив, с наименованием (код) дерева.
// Массив заполняем кодами групп товара в которых находится собственный товар 
//
// Возвращаемое значение:
//   Массив.мТоварСобственный   - Коды дерева групп, собственного товара
//
&НаСервереБезКонтекста
Функция ПолучитьСписокГруппТоварСобственный()
	
	мТоварСобственный = Новый Массив;
	мТоварСобственный.Добавить("4.");
	мТоварСобственный.Добавить("10.2.");
	мТоварСобственный.Добавить("14.2.");
	мТоварСобственный.Добавить("20.");
	мТоварСобственный.Добавить("230.");
	мТоварСобственный.Добавить("235.");
	мТоварСобственный.Добавить("240.");
	мТоварСобственный.Добавить("250.");
	мТоварСобственный.Добавить("260.");
	мТоварСобственный.Добавить("265.");
	мТоварСобственный.Добавить("1000.");
	
	Возврат мТоварСобственный;
	
КонецФункции // ()

&НаКлиенте
Процедура ПолучитьГруппы(Команда)
	
	ПолучитьИерархиюНоменклатурыИзСупермага(ПолучитьСписокГруппТоварСобственный());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИерархиюНоменклатурыИзСупермага(МассивСобственногоТовара)
	
	ТекстЗапроса =
	"SELECT
	|	TREE 	AS ""Дерево"",
	|	NAME 	AS ""НаименованиеГруппы"",
	|	ID 		AS ""КодГруппы""
	|FROM 
	|	SUPERMAG.SACARDCLASS";
	
	Connection = Подключиться_к_БД_Oracle();
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	While NOT RecordSet.EOF Do
		нСтр = НоменклатурныеГруппыТЗ.Добавить();
		нСтр.Дерево		 		= RecordSet.Fields("Дерево").Value;
		нСтр.Флаг 				= ?(МассивСобственногоТовара.Найти(нСтр.Дерево) = Неопределено, Ложь, Истина);
		нСтр.НаименованиеГруппы	= RecordSet.Fields("НаименованиеГруппы").Value;
		нСтр.КодГруппы			= RecordSet.Fields("КодГруппы").Value;
		нСтр.УровеньИерархии	= СтрЧислоВхождений(RecordSet.Fields("Дерево").Value,"."); 		
		RecordSet.MoveNext();
	EndDo;
	
	//Теперь заполним колонку "Родитель" в НоменклатурныеГруппыТЗ
	ЗаполнитьРодителяНоменклатурныеГруппыТЗ();
	
	//Выгрузим результаты в дерево значениий НоменклатурныеГруппыДЗ
	НоменклатурныеГруппыВДеревоЗначений();
	
	RecordSet.Close();
	Connection.Close();
	
КонецФункции

&НаСервере
Функция ЗаполнитьТабличнуюЧастьКомиссионаяНоменклатураДляСтавокНДС()
	
	Объект.КомиссионаяНоменклатураДляСтавокНДС.Загрузить(Поиск_номенклатуры_для_НДС_по_дополнительному_свойству("Комиссия"));
	
КонецФункции

&НаСервере
Функция ЗаполнитьТабличнуюЧастьНоменклатураДляСтавокНДС()
	
	Объект.НоменклатураДляСтавокНДС.Загрузить(Поиск_номенклатуры_для_НДС_по_дополнительному_свойству("Собственный товар"));
	
КонецФункции

//Ищем номенклатуру, для свертки товаров, по ставке НДС, по дополнительному свойству где:
//						- ВидТовара (тип.строка). Вид товара "Собственный товар" или Комиссия
//						- "Товар (на комиссии) для ставки НДС" - это для комиссионого товара
//						- "Товар для ставки НДС" - это собственный товар
&НаСервереБезКонтекста
Функция Поиск_номенклатуры_для_НДС_по_дополнительному_свойству(ВидТовара)
	
	Если ВидТовара = "Собственный товар" Тогда
		ДополнительноеСвойство 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Товар для ставки НДС (Номенклатура)");
	Иначе
		ДополнительноеСвойство	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Товар (на комиссии) для ставки НДС (Номенклатура)");
	КонецЕсли; 
	
	Запрос = Новый  Запрос;
	Запрос.УстановитьПараметр("ДополнительноеСвойство", ДополнительноеСвойство);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект.Ссылка КАК Номенклатура,
	|	ДополнительныеСведения.Объект.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &ДополнительноеСвойство
	|	И НЕ ДополнительныеСведения.Значение ЕСТЬ NULL
	|	И НЕ ДополнительныеСведения.Значение = """"
	|	И НЕ ДополнительныеСведения.Значение = НЕОПРЕДЕЛЕНО";
	
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции

&НаСервере
Функция ЗаполнитьРодителяНоменклатурныеГруппыТЗ()
	
	тзНоменклатурныеГруппы = РеквизитФормыВЗначение("НоменклатурныеГруппыТЗ");
	Разделитель = ".";
	
	Для каждого тзСтр Из тзНоменклатурныеГруппы Цикл		
		Если СтрЧислоВхождений(тзСтр.Дерево,Разделитель)>1 Тогда
			мСтрока = СтрРазделить(тзСтр.Дерево,Разделитель);
			мСтрока.Удалить(СтрЧислоВхождений(тзСтр.Дерево,Разделитель)-1);
			стрПоиск = СтрСоединить(мСтрока,Разделитель);
			тзСтр.Родитель = тзНоменклатурныеГруппы.Найти(стрПоиск,"Дерево").КодГруппы; 
		Иначе 
			тзСтр.Родитель = "0000000001";
		КонецЕсли; 
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(тзНоменклатурныеГруппы,"НоменклатурныеГруппыТЗ");
	
КонецФункции

&НаСервере
Процедура НоменклатурныеГруппыВДеревоЗначений()
	
	дНоменклатурныеГруппы 	= РеквизитФормыВЗначение("НоменклатурныеГруппыДЗ");
	тзНоменклатурныеГруппы 	= РеквизитФормыВЗначение("НоменклатурныеГруппыТЗ");
	
	НоменклатурныеГруппыВДеревоЗначенийРекурсия(дНоменклатурныеГруппы, тзНоменклатурныеГруппы, "0000000001");
	тзНоменклатурныеГруппы.Очистить();
	
	дНоменклатурныеГруппы.Строки.Сортировать("Дерево");
	ЗначениеВРеквизитФормы(дНоменклатурныеГруппы, "НоменклатурныеГруппыДЗ"); 	
	
КонецПроцедуры

&НаСервере
Процедура НоменклатурныеГруппыВДеревоЗначенийРекурсия(Дерево, тзИсходник, Родитель)
	
	тПоиск = Новый Структура("Родитель", Родитель);
	тМассив = тзИсходник.НайтиСтроки(тПоиск);
	
	Для Каждого тСтр Из тМассив Цикл
		нСтр = Дерево.Строки.Добавить();
		нСтр.Дерево				= тСтр.Дерево;
		нСтр.НаименованиеГруппы	= тСтр.НаименованиеГруппы;
		нСтр.КодГруппы			= тСтр.КодГруппы;
		нСтр.Отбор				= тСтр.Флаг;
		НоменклатурныеГруппыВДеревоЗначенийРекурсия(нСтр, тзИсходник, тСтр.КодГруппы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОтборПоГруппам(Команда)
	
	ПолучитьОтборТовараПоИерархииНоменклатуры();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтборТовараПоИерархииНоменклатуры()
	
	тДерево 			= РеквизитФормыВЗначение("НоменклатурныеГруппыДЗ");
	тТаблицаЗначений 	= РеквизитФормыВЗначение("ОтборГруппыТовара");
	тТаблицаЗначений.Очистить();
	ОбходДереваРекурсия(тДерево, тТаблицаЗначений);
	ЗначениеВРеквизитФормы(тТаблицаЗначений, "ОтборГруппыТовара");
	
КонецФункции

&НаСервере
Функция ОбходДереваРекурсия(тДерево, тТаблицаЗначений)
	
	Для Каждого тСтр Из тДерево.Строки Цикл
		Если тСтр.Отбор Тогда
			нСтр = тТаблицаЗначений.Добавить();
			нСтр.КодГруппы = тСтр.КодГруппы;
			стрПотомки = тСтр.Строки;
			Если тСтр.Строки.Количество()>0 Тогда
				ОбходПотомковДереваРекурсия(тСтр.Строки, тТаблицаЗначений);
			КонецЕсли;
		КонецЕсли; 
		
		Если тСтр.Строки.Количество()>0 Тогда
			ОбходДереваРекурсия(тСтр, тТаблицаЗначений);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции 

&НаСервере
Функция ОбходПотомковДереваРекурсия(тДеревоПотомков, тТаблицаЗначений)
	
	Для каждого тСтр Из тДеревоПотомков Цикл
		нСтр = тТаблицаЗначений.Добавить();
		нСтр.КодГруппы = тСтр.КодГруппы;
		Если тСтр.Строки.Количество()>0 Тогда
			ОбходПотомковДереваРекурсия(тСтр.Строки, тТаблицаЗначений);
		КонецЕсли;
	КонецЦикла; 
	
КонецФункции

&НаСервере
Функция ЗаполнитьПризнакТовараСобственныйКомисссия(тзСпецификации)
	
	тзОтборГруппыТовара = РеквизитФормыВЗначение("ОтборГруппыТовара");
	
	Для каждого тСтр Из тзСпецификации Цикл
		Если тзОтборГруппыТовара.Найти(тСтр.КодГруппы,"КодГруппы")= Неопределено Тогда
			Продолжить;			
		КонецЕсли;
		тСтр.ТоварСобственный = Истина;
	КонецЦикла; 
	
КонецФункции

&НаСервере
Функция ПолучитьНоменклатуру(Поиск)
	
	перем Ном;
	
	//Сначала ищем номенклатуру по доп. свойству (Идентификатор СМ)
	ДопСвойство	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор СМ ("+Метаданные.Справочники.Номенклатура.ПредставлениеСписка+")");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСМ", Поиск.Артикул);
	Запрос.УстановитьПараметр("Свойство", ДопСвойство);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект.Ссылка
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
	|	И ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &ИдентификаторСМ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Ном	= Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		Ном = 	РезультатЗапроса.Выгрузить()[0].ОбъектСсылка;	
	КонецЕсли; 
	
	//Если не нашли по доп. свойтсву ищем по коду (Артикул из Супермаг)
	Если Ном = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Ном = Справочники.Номенклатура.НайтиПоКоду(Поиск.Артикул);
		//Если не нашли по коду то ищем по наименованию
		Если Ном = Справочники.Номенклатура.ПустаяСсылка() Тогда 
			Ном = Справочники.Номенклатура.НайтиПоНаименованию(Поиск.Номенклатура);
			//Если даже по наименованию не нашли, то создадим и запишем новую номенклатуру
			Если Ном = Справочники.Номенклатура.ПустаяСсылка() Тогда
				Ном = ЗаписатьНовуюНоменклатуру(Поиск);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Ном;
	
КонецФункции

&НаСервере
Функция ЗаписатьНовуюНоменклатуру(НоменклатураСупермаг);
	
	Если НоменклатураСупермаг.СтавкаНДС = 18 Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли НоменклатураСупермаг.СтавкаНДС = 10 Тогда 	
		СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
	Иначе
		СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли; 
	
	Товар 	= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товары");
	Услуга 	= Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга");
	//Единица измерения (шт,кг,литр,грамм)
	ЕдИзм = Новый Массив;
	ЕдИзм.Вставить(0,Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт"));
	ЕдИзм.Вставить(1,Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг"));
	ЕдИзм.Вставить(2,Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("л"));
	ЕдИзм.Вставить(3,Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("г"));
	
	//Формируем текст запроса
	ТекстЗапроса = 
	"SELECT 
	|		SACARDCLASS.NAME 		AS ""Родитель"",
	|		SMCARD.ARTICLE 			AS ""Код"", 
	|		SMCARD.NAME 			AS ""Наименование"", 
	|		SMCARD.SHORTNAME		AS ""ПолноеНаименование"", 
	|		SMCARD.IDMEASUREMENT 	AS ""ИдентификаторЕдИзм"", 
	|		SMCARD.DATATYPE 		AS ""ТипНоменклатуры"",   
	|		SMCARD.CARDCOMMENT		AS ""Комментарий"",  
	|		SMCARD.IDSPIRITCODE 	AS ""ИдКлассификатораАлкоголя""
	|	FROM SUPERMAG.SMCARD
	|LEFT JOIN SUPERMAG.SACARDCLASS ON SACARDCLASS.ID = IDCLASS 
	|	WHERE SMCARD.ARTICLE = '"+НоменклатураСупермаг.Артикул+"'";
	
	//Подключаемся (к Oracle БД)и выполняем запрос
	Connection = Подключиться_к_БД_Oracle();	
	RecordSet = ВыполнитьЗапросOracle(Connection, ТекстЗапроса);
	
	ИдентификаторСМ = "";
	НоваяНоменклатураСпр = Справочники.Номенклатура.СоздатьЭлемент();
	While RecordSet.EOF = False DO
		
		ИдентификаторСМ = Строка(RecordSet.Fields("Код").Value);
		
		//Попытаемся найти группу(Родителя) номенклатуры
		НоменклатураРодитель = Справочники.Номенклатура.НайтиПоНаименованию(RecordSet.Fields("Родитель").Value);
		
		НоваяНоменклатураСпр.Код				= "SM"+Прав(Строка(RecordSet.Fields("Код").Value),9);
		НоваяНоменклатураСпр.ВидНоменклатуры	= ?(Число(RecordSet.Fields("ТипНоменклатуры").Value) = 0,ТОвар,Услуга);
		НоваяНоменклатураСпр.Родитель			= ?(НоменклатураРодитель.ЭтоГруппа, НоменклатураРодитель, Справочники.Номенклатура.ПустаяСсылка());
		НоваяНоменклатураСпр.Наименование		= RecordSet.Fields("Наименование").Value;
		НоваяНоменклатураСпр.ЕдиницаИзмерения	= ЕдИзм[Number(RecordSet.Fields("ИдентификаторЕдИзм").Value)];
		НоваяНоменклатураСпр.СтавкаНДС 			= СтавкаНДС;
		НоваяНоменклатураСпр.Комментарий		= "Загружена из Супермаг+";
		
		RecordSet.MoveNext();
		
	EndDo;
	
	НоменклатураЗаписана = Ложь;
	Попытка
		НоваяНоменклатураСпр.Записать();
		НоменклатураЗаписана = Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	
	//Если номенклатура записана в БД, присвоем ей доп.свойство "Идентификатор СМ" - возможно в дальнейшем, будет переделан поиск номенклатуры по этому доп. свойству, а не по наименованию
	Если НоменклатураЗаписана Тогда
		Попытка
			ЗаписатьИдентификаторСМ(НоваяНоменклатураСпр.Ссылка, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор СМ ("+Метаданные.Справочники.Номенклатура.ПредставлениеСписка+")"), ИдентификаторСМ);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЕсли; 	
	
	RecordSet.Close();
	Connection.Close();
	
	Возврат НоваяНоменклатураСпр;
	
	
КонецФункции


#КонецОбласти 


#КонецОбласти 
#Область Общие_и_отладочные_функции

#Область для_разработки_и_отладки

////Функция создана на период разработки, для быстрого заполнения первоначального отбора.
////По окончании рарзаботки и отладки необходимо закоментировать область кода для_разработки_и_отладки
//&НаКлиенте
//Функция ЗаполнениеОтборовНаПериодРазработки()
//	
//	Объект.Период.ДатаНачала		= '20170701';
//	Объект.Период.ДатаОкончания 	= '20170712';
//	Объект.ИдентификаторыСкладов.Получить(5).Флаг = Истина;
//	ПолучитьОрганизациюКомитентаСклад();
//	
//КонецФункции

//&НаСервере
//Функция ПолучитьОрганизациюКомитентаСклад()
//	
//	Объект.Организация 	= Справочники.Организации.НайтиПоНаименованию("Торгцентр ООО");
//	Объект.Склад		= Справочники.Склады.НайтиПоНаименованию("Торговый зал");
//	
//КонецФункции

#КонецОбласти 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ПолучитьПервичныеДанныеИзСупермаг("");//(удалить)
	ЗаполнитьСтавкиНДС();	
	ЗаполнитьСчетаУчета();
	ЗаполнитьТабличнуюЧастьНоменклатураДляСтавокНДС();
	ЗаполнитьТабличнуюЧастьКомиссионаяНоменклатураДляСтавокНДС();
	
	Комитент 		=  ПолучитьКомитентПоУмолчанию();//(удалить)
	ДоговорКомиссии = ПолучитьДоговорКомиссии(Комитент);//(удалить)
	//ЗаполнениеОтборовНаПериодРазработки(); //По окончании рарзаботки и отладки необходимо закоментировать эту функцию
	
КонецПроцедуры

&НаКлиенте 
Функция ЗаполнитьСчетаУчета()
	
	МассивСчетовУчета = ПолучитьСчетаУчетов();
	СчетУчетаТоваровКомиссия			= МассивСчетовУчета[0];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","00401");
	СчетУчетаТоваров					= МассивСчетовУчета[1];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","4102");
	СчетУчетаРассчетовСКонтрагентами 	= МассивСчетовУчета[2];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","7605");
	СчетУчетаРасчетовПоАвансам 			= МассивСчетовУчета[3];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","6002");
	СчетУчетаНДС						= МассивСчетовУчета[4];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","1903");
	СчетУчетаРасчетовПоПретензиям      	= МассивСчетовУчета[5];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","6001");
	СчетКасса							= МассивСчетовУчета[6];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","5001");
	СчетДоходов							= МассивСчетовУчета[7];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","90011");
	СчетРасходов						= МассивСчетовУчета[8];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","90021");
	СчетУчетаНДСАлкоголь				= МассивСчетовУчета[9];//ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","9003");
	МассивСчетовУчета.Очистить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСчетаУчетов()
	
	мСчетаУчетов = Новый Массив;
	мСчетаУчетов.Вставить(0, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","00401"));
	мСчетаУчетов.Вставить(1, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","4102"));
	мСчетаУчетов.Вставить(2, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","7605"));
	мСчетаУчетов.Вставить(3, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","6002"));
	мСчетаУчетов.Вставить(4, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","1903"));
	мСчетаУчетов.Вставить(5, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","6001"));
	мСчетаУчетов.Вставить(6, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","5001"));
	мСчетаУчетов.Вставить(7, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","90011"));
	мСчетаУчетов.Вставить(8, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","90021"));
	мСчетаУчетов.Вставить(9, ПланыСчетов.Хозрасчетный.НайтиПоРеквизиту("КодБыстрогоВыбора","9003"));
	Возврат мСчетаУчетов;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьСтавкиНДС()
	
	МассивСтавокНДС = ПолучитьСтавкиНДС();
	БезНДС 	= МассивСтавокНДС[0];
	НДС10	= МассивСтавокНДС[1];
	НДС18	= МассивСтавокНДС[2];
	
	МассивСтавокНДС.Очистить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтавкиНДС()
	
	СтавкиНДС = Новый Массив;
	СтавкиНДС.Вставить(0,Перечисления.СтавкиНДС.БезНДС);
	СтавкиНДС.Вставить(1,Перечисления.СтавкиНДС.НДС10);
	СтавкиНДС.Вставить(2,Перечисления.СтавкиНДС.НДС18);
	Возврат СтавкиНДС;
	
КонецФункции

//По имени команды обрабатываем действие с флагом(Булево)
//Команда должна называться согласно шаблону "УстанФлаг_ИмяТабличнойЧасти/СнятьФлаг_ИмяТабличнойЧасти"
//Первые пять символов префикс команды:
//"Устан" 	- проставляем флажки, в табличной части
//"Снять"	- снимаем флажки, с табличной части
//С 11 символа и по конец строки, получаем имя табличной части
&НаКлиенте
Функция ОбработатьФлаг(Команда)
	
	ВзвестиФлаг = ?(Лев(Команда.Имя,5)="Устан", Истина, Ложь);
	ИмяТабличнойЧасти = Сред(Команда.Имя,11);
	УстановитьСнятьФлаг(ИмяТабличнойЧасти, ВзвестиФлаг)
	
КонецФункции

//Ставим или снимаем флажки, со всей табличной части
&НаКлиенте
Функция УстановитьСнятьФлаг(ТабличнаяЧасть, ВзводФлага)
	
	Если ТабличнаяЧасть = "НоменклатурныеГруппыДЗ" Тогда
		УстановитьФлагНоменклатурныеГруппыДЗ(ВзводФлага);
	Иначе 
		Для каждого СтрокаФлаг Из Объект[ТабличнаяЧасть] Цикл
			СтрокаФлаг.Флаг = ВзводФлага; 	
		КонецЦикла; 
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьФлагНоменклатурныеГруппыДЗ(ВзводФлага)
	
	дНоменклатурныеГруппыДЗ = РеквизитФормыВЗначение("НоменклатурныеГруппыДЗ");
	
	Для каждого дСтрока Из дНоменклатурныеГруппыДЗ.Строки Цикл
		дСтрока.Отбор = ВзводФлага;	
	КонецЦикла;
	ЗначениеВРеквизитФормы(дНоменклатурныеГруппыДЗ,"НоменклатурныеГруппыДЗ");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДополнительноеСвойство(ДокументТипОтбор)
	
	мЧерезСиноним = Новый Массив;
	мЧерезСиноним.Добавить("ПоступлениеТоваровУслуг");
	мЧерезСиноним.Добавить("РеализацияТоваровУслуг");
	мЧерезСиноним.Добавить("ОприходованиеТоваров");
	мЧерезСиноним.Добавить("СписаниеТоваров");
	
	мЧерезПредставлениеСписка = Новый Массив;
	мЧерезПредставлениеСписка.Добавить("ВозвратТоваровПоставщику");
	мЧерезПредставлениеСписка.Добавить("ОтчетОРозничныхПродажах");
	мЧерезПредставлениеСписка.Добавить("ОперацияБух");      
	
	Если НЕ мЧерезСиноним.Найти(ДокументТипОтбор) = Неопределено Тогда
		Возврат	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор СМ ("+Метаданные.Документы[ДокументТипОтбор].Синоним+")");
	ИначеЕсли НЕ мЧерезПредставлениеСписка.Найти(ДокументТипОтбор) = Неопределено Тогда 	
		Возврат	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор СМ ("+Метаданные.Документы[ДокументТипОтбор].ПредставлениеСписка+")");
	КонецЕсли; 
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьДоговорКонтрагента(Контрагент)
	
	ВидДоговораПоиск = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	Возврат Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ВидДоговора", ВидДоговораПоиск, , Контрагент); 
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивВСтрокуЗапроса(МассивВСтроку)
	
	//Раскладываем массив на строку, для вставки, в условие отбора, в SQL запрос
	СтрокаИзМассива ="";
	Для каждого ЭлементМассива Из МассивВСтроку Цикл
		СтрокаИзМассива = СтрокаИзМассива+"'"+ЭлементМассива+"',";
	КонецЦикла;
	
	МассивВСтроку.Очистить();
	Возврат Лев(СтрокаИзМассива,СтрДлина(СтрокаИзМассива)-1);//Удалим лишнюю запятую из конца строки
	
КонецФункции

////Запись дополнительного свойства "Идентификатор СМ" для новых объектов
//
// Параметры:
//ОбъектСсылка  	- Объект.Ссылка - Ссылка на объект, для которого записывается доп.свойство
//ДопСвойство  		- ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Ссылка - ссылка на дополнительное свойство
//ИдентификаторСМ 	- Записываемое значение, для дополнительного свойства
//Возвращаемое значение: Отсутствует
&НаСервереБезКонтекста
Функция ЗаписатьИдентификаторСМ(ОбъектСсылка, ДопСвойство, ИдентификаторСМ)
	
	МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект 	= ОбъектСсылка;
	МенеджерЗаписи.Свойство = ДопСвойство;
	МенеджерЗаписи.Значение	= ИдентификаторСМ;
	МенеджерЗаписи.Записать();
	
КонецФункции

&НаКлиенте
Процедура КомиссионерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДоговорКомиссии = ПолучитьДоговорКомиссии(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссионерПриИзменении(Элемент)
	
	ДоговорКомиссии = ПолучитьДоговорКомиссии(Комитент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорКомиссии(Контрагент)
	
	ВидДоговораПоиск 	= Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	Возврат Справочники.ДоговорыКонтрагентов.НайтиПоРеквизиту("ВидДоговора", ВидДоговораПоиск, , Контрагент);  
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомитентПоУмолчанию() //(удалить)
	
	Возврат Справочники.Контрагенты.НайтиПоРеквизиту("ИНН","7722862534"); 
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПервичныеДанныеИзСупермаг(Команда)
	
	ЗаполнитьПараметрыСоединенияOracle();
	ПолучитьСкладыИзСупермага("");
	ПолучитьГруппы("");
	ПолучитьОперацииИзСМ();
	
КонецПроцедуры


#КонецОбласти 

